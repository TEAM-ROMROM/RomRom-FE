name: 프로젝트 빌드 테스트

on:
  pull_request:
    branches: ["main"]

# PR 댓글을 위한 권한 추가
permissions:
  contents: read
  pull-requests: write

jobs:
  test-project-build:
    name: 프로젝트 빌드 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 소스코드 체크아웃
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 환경 변수 파일 생성
        id: create-env
        run: |
          printf "%s\n" "${{ secrets.ENV }}" > .env
          if [ $? -ne 0 ]; then
            echo "::error::환경 변수 파일 생성 실패!"
            exit 1
          fi

      - name: 키스토어 설정
        id: setup-keystore
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore/key.jks
          if [ $? -ne 0 ]; then
            echo "::error::키스토어 파일 생성 실패!"
            exit 1
          fi
          
          echo "storeFile=keystore/key.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties

      - name: Flutter 설정
        id: setup-flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.3"
          cache: true
          cache-key: flutter-${{ runner.os }}-3.27.3

      - name: Flutter 의존성 캐싱
        id: cache-flutter
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Gradle 의존성 캐싱
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: local.properties 생성
        id: create-local-props
        run: |
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          echo "flutter.sdk=$FLUTTER_HOME" >> android/local.properties

      - name: 의존성 설치
        id: install-deps
        run: flutter pub get

      - name: Gradle 설정
        id: setup-gradle
        working-directory: android
        run: chmod +x gradlew

      - name: Java 설정
        id: setup-java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Android SDK 설정
        id: setup-android
        uses: android-actions/setup-android@v3

      - name: 코드 분석 실행
        id: flutter-analyze
        run: flutter analyze

      - name: APK 빌드
        id: build-apk
        run: flutter build apk --debug

      - name: 빌드 결과 확인
        id: check-output
        run: |
          if [ ! -d "build/app/outputs/flutter-apk/" ]; then
            echo "::error::빌드 결과물 디렉토리가 존재하지 않습니다!"
            exit 1
          fi
          
          ls -la build/app/outputs/flutter-apk/
          
          if [ ! -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "::error::APK 파일이 생성되지 않았습니다!"
            exit 1
          fi

      # 실패한 단계 찾기
      - name: 실패한 단계 찾기
        id: find-failure
        if: failure()
        run: |
          if [ "${{ steps.checkout.outcome }}" == "failure" ]; then
            echo "failed_step=소스코드 체크아웃" >> $GITHUB_OUTPUT
          elif [ "${{ steps.create-env.outcome }}" == "failure" ]; then
            echo "failed_step=환경 변수 파일 생성" >> $GITHUB_OUTPUT
          elif [ "${{ steps.setup-keystore.outcome }}" == "failure" ]; then
            echo "failed_step=키스토어 설정" >> $GITHUB_OUTPUT
          elif [ "${{ steps.setup-flutter.outcome }}" == "failure" ]; then
            echo "failed_step=Flutter 설정" >> $GITHUB_OUTPUT
          elif [ "${{ steps.create-local-props.outcome }}" == "failure" ]; then
            echo "failed_step=local.properties 생성" >> $GITHUB_OUTPUT
          elif [ "${{ steps.install-deps.outcome }}" == "failure" ]; then
            echo "failed_step=의존성 설치" >> $GITHUB_OUTPUT
          elif [ "${{ steps.setup-gradle.outcome }}" == "failure" ]; then
            echo "failed_step=Gradle 설정" >> $GITHUB_OUTPUT
          elif [ "${{ steps.setup-java.outcome }}" == "failure" ]; then
            echo "failed_step=Java 설정" >> $GITHUB_OUTPUT
          elif [ "${{ steps.setup-android.outcome }}" == "failure" ]; then
            echo "failed_step=Android SDK 설정" >> $GITHUB_OUTPUT
          elif [ "${{ steps.flutter-analyze.outcome }}" == "failure" ]; then
            echo "failed_step=코드 분석" >> $GITHUB_OUTPUT
          elif [ "${{ steps.build-apk.outcome }}" == "failure" ]; then
            echo "failed_step=APK 빌드" >> $GITHUB_OUTPUT
          elif [ "${{ steps.check-output.outcome }}" == "failure" ]; then
            echo "failed_step=빌드 결과 확인" >> $GITHUB_OUTPUT
          else
            echo "failed_step=알 수 없는 단계" >> $GITHUB_OUTPUT
          fi

      - name: 빌드 성공 댓글 작성
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ 프로젝트 빌드 성공`
            })

      - name: 빌드 실패 댓글 작성
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ 프로젝트 빌드 실패\n\n실패한 단계: ${{ steps.find-failure.outputs.failed_step }}`
            })
name: 프로젝트 빌드 테스트

on:
  pull_request:
    branches: ["main"]

jobs:
  test-project-build:
    name: 프로젝트 빌드 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 소스코드 체크아웃
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 환경 변수 파일 생성
        id: create-env
        run: |
          printf "%s\n" "${{ secrets.ENV }}" > .env
          if [ $? -ne 0 ]; then
            echo "::error::환경 변수 파일 생성 실패!"
            exit 1
          fi

      - name: 키스토어 설정
        id: setup-keystore
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore/key.jks
          if [ $? -ne 0 ]; then
            echo "::error::키스토어 파일 생성 실패!"
            exit 1
          fi
          
          echo "storeFile=keystore/key.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          
          if [ ! -f android/key.properties ]; then
            echo "::error::key.properties 파일 생성 실패!"
            exit 1
          fi

      - name: Flutter 설정
        id: setup-flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.3"
          cache: true
          cache-key: flutter-${{ runner.os }}-3.27.3

      - name: Flutter 의존성 캐싱
        id: cache-flutter
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Gradle 의존성 캐싱
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: local.properties 생성
        id: create-local-props
        run: |
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          echo "flutter.sdk=$FLUTTER_HOME" >> android/local.properties
          
          if [ ! -f android/local.properties ]; then
            echo "::error::local.properties 파일 생성 실패!"
            exit 1
          fi

      - name: 의존성 설치
        id: install-deps
        run: |
          flutter pub get
          if [ $? -ne 0 ]; then
            echo "::error::Flutter 의존성 설치 실패!"
            exit 1
          fi

      - name: Gradle 설정
        id: setup-gradle
        working-directory: android
        run: |
          chmod +x gradlew
          if [ $? -ne 0 ]; then
            echo "::error::Gradle 설정 실패!"
            exit 1
          fi

      - name: Java 설정
        id: setup-java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Android SDK 설정
        id: setup-android
        uses: android-actions/setup-android@v3

      - name: 코드 분석 실행
        id: flutter-analyze
        run: |
          flutter analyze
          if [ $? -ne 0 ]; then
            echo "::error::코드 분석 실패! 코드를 확인해주세요."
            exit 1
          fi

      - name: APK 빌드
        id: build-apk
        run: |
          flutter build apk --debug
          if [ $? -ne 0 ]; then
            echo "::error::APK 빌드 실패!"
            exit 1
          fi

      - name: 빌드 결과 확인
        id: check-output
        run: |
          if [ ! -d "build/app/outputs/flutter-apk/" ]; then
            echo "::error::빌드 결과물 디렉토리가 존재하지 않습니다!"
            exit 1
          fi
          
          ls -la build/app/outputs/flutter-apk/
          
          if [ ! -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "::error::APK 파일이 생성되지 않았습니다!"
            exit 1
          fi

      - name: 빌드 상태 저장
        if: always()
        run: |
          mkdir -p build-status
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ 프로젝트 빌드 성공! 모든 단계가 정상적으로 완료되었습니다." > build-status/status.txt
          else
            echo "❌ 프로젝트 빌드 실패! 자세한 오류 정보는 로그를 확인해주세요." > build-status/status.txt
          fi

      - name: 빌드 상태 업로드
        if: always()
        # Upload-artifact v3에서 v4로 업데이트
        uses: actions/upload-artifact@v4
        with:
          name: build-status
          path: build-status/
          retention-days: 7

    outputs:
      build_status: ${{ job.status }}

  notify:
    name: 빌드 상태 알림
    needs: test-project-build
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 빌드 상태 표시
        run: |
          if [ "${{ needs.test-project-build.outputs.build_status }}" == "success" ]; then
            echo "::notice title=빌드 상태::✅ 프로젝트 빌드 성공! 모든 단계가 정상적으로 완료되었습니다."
          else
            echo "::error title=빌드 상태::❌ 프로젝트 빌드 실패! 빌드 로그에서 자세한 오류 정보를 확인하세요."
          fi
name: 프로젝트 빌드 테스트

on:
  pull_request:
    branches: ["main"]

jobs:
  test-project-build:
    name: 프로젝트 빌드 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 소스코드 체크아웃
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 환경 변수 파일 생성
        id: create-env
        run: |
          printf "%s\n" "${{ secrets.ENV }}" > .env
          if [ $? -ne 0 ]; then
            echo "::error::환경 변수 파일 생성 실패!"
            exit 1
          fi

      - name: 키스토어 설정
        id: setup-keystore
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore/key.jks
          if [ $? -ne 0 ]; then
            echo "::error::키스토어 파일 생성 실패!"
            exit 1
          fi
          
          echo "storeFile=keystore/key.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          
          if [ ! -f android/key.properties ]; then
            echo "::error::key.properties 파일 생성 실패!"
            exit 1
          fi

      - name: Flutter 설정
        id: setup-flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.3"
          cache: true
          cache-key: flutter-${{ runner.os }}-3.27.3

      - name: Flutter 의존성 캐싱
        id: cache-flutter
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Gradle 의존성 캐싱
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: local.properties 생성
        id: create-local-props
        run: |
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          echo "flutter.sdk=$FLUTTER_HOME" >> android/local.properties
          
          if [ ! -f android/local.properties ]; then
            echo "::error::local.properties 파일 생성 실패!"
            exit 1
          fi

      - name: 의존성 설치
        id: install-deps
        run: |
          flutter pub get
          if [ $? -ne 0 ]; then
            echo "::error::Flutter 의존성 설치 실패!"
            exit 1
          fi

      - name: Gradle 설정
        id: setup-gradle
        working-directory: android
        run: |
          chmod +x gradlew
          if [ $? -ne 0 ]; then
            echo "::error::Gradle 설정 실패!"
            exit 1
          fi

      - name: Java 설정
        id: setup-java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Android SDK 설정
        id: setup-android
        uses: android-actions/setup-android@v3

      - name: 코드 분석 실행
        id: flutter-analyze
        run: |
          flutter analyze
          if [ $? -ne 0 ]; then
            echo "::error::코드 분석 실패! 코드를 확인해주세요."
            exit 1
          fi

      - name: APK 빌드
        id: build-apk
        run: |
          flutter build apk --debug
          if [ $? -ne 0 ]; then
            echo "::error::APK 빌드 실패!"
            exit 1
          fi

      - name: 빌드 결과 확인
        id: check-output
        run: |
          if [ ! -d "build/app/outputs/flutter-apk/" ]; then
            echo "::error::빌드 결과물 디렉토리가 존재하지 않습니다!"
            exit 1
          fi
          
          ls -la build/app/outputs/flutter-apk/
          
          if [ ! -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "::error::APK 파일이 생성되지 않았습니다!"
            exit 1
          fi

      - name: 실패한 단계 찾기
        id: find-failure
        if: failure()
        run: |
          echo "failed_step=${{ steps.checkout.outcome == 'failure' && '소스코드 체크아웃' ||
            steps.create-env.outcome == 'failure' && '환경 변수 파일 생성' ||
            steps.setup-keystore.outcome == 'failure' && '키스토어 설정' ||
            steps.setup-flutter.outcome == 'failure' && 'Flutter 설정' ||
            steps.create-local-props.outcome == 'failure' && 'local.properties 생성' ||
            steps.install-deps.outcome == 'failure' && '의존성 설치' ||
            steps.setup-gradle.outcome == 'failure' && 'Gradle 설정' ||
            steps.setup-java.outcome == 'failure' && 'Java 설정' ||
            steps.setup-android.outcome == 'failure' && 'Android SDK 설정' ||
            steps.flutter-analyze.outcome == 'failure' && '코드 분석' ||
            steps.build-apk.outcome == 'failure' && 'APK 빌드' ||
            steps.check-output.outcome == 'failure' && '빌드 결과 확인' ||
            '알 수 없는 단계' }}" >> $GITHUB_OUTPUT

      - name: PR에 성공 메시지 작성
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ✅ 프로젝트 빌드 성공!
            
              모든 단계가 성공적으로 완료되었습니다.
            
              ### 빌드 정보
              - 빌드 시간: ${new Date().toISOString()}
              - 커밋: ${context.sha.substring(0, 7)}
              - 브랜치: ${context.ref.replace('refs/heads/', '')}
            
              빌드된 앱이 정상적으로 생성되었습니다. 👍`
            })

      - name: PR에 실패 메시지 작성
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let errorLog = '';
            
            try {
              // 실패한 단계 정보 가져오기
              const failedStep = '${{ steps.find-failure.outputs.failed_step }}';
            
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ❌ 프로젝트 빌드 실패!
            
                ### 실패한 단계: ${failedStep}
            
                자세한 오류 내용은 [워크플로우 실행 로그](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})에서 확인할 수 있습니다.
            
                빌드 문제를 해결한 후 다시 시도해주세요. 🔍`
              })
            } catch (error) {
              console.log(`Error creating comment: ${error}`);
            }
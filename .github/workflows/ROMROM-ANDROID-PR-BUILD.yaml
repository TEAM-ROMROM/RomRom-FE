name: 프로젝트 빌드 테스트

on:
  pull_request:
    branches: ["main"]
  workflow_dispatch: # 수동 실행 옵션 추가

# PR 댓글을 위한 권한 추가
permissions:
  contents: read
  pull-requests: write

jobs:
  test-project-build:
    name: 프로젝트 빌드 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 소스코드 체크아웃
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 환경 변수 파일 생성
        id: create-env
        run: |
          printf "%s\n" "${{ secrets.ENV }}" > .env

      - name: 키스토어 설정
        id: setup-keystore
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore/key.jks

          echo "storeFile=keystore/key.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties

      - name: Flutter 설정
        id: setup-flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.3"
          cache: true
          cache-key: flutter-${{ runner.os }}-3.27.3

      - name: Flutter 의존성 캐싱
        id: cache-flutter
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Gradle 의존성 캐싱
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: local.properties 생성
        id: create-local-props
        run: |
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          echo "flutter.sdk=$FLUTTER_HOME" >> android/local.properties

      - name: 의존성 설치
        id: install-deps
        run: flutter pub get

      - name: Gradle 설정
        id: setup-gradle
        working-directory: android
        run: chmod +x gradlew

      - name: Java 설정
        id: setup-java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Android SDK 설정
        id: setup-android
        uses: android-actions/setup-android@v3

      - name: 코드 분석 실행
        run: |
          set -o pipefail
          flutter analyze > flutter_analyze_output.txt 2>&1 || exit 1
          echo "====== FLUTTER ANALYZE RESULT ======"
          cat flutter_analyze_output.txt
          echo "===================================="

      - name: Upload analyze log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-analyze-log
          path: flutter_analyze_output.txt

      - name: APK 빌드
        id: build-apk
        run: |
          # 결과를 파일로 저장
          flutter build apk --debug > flutter_build_output.txt 2>&1 || {
            echo "FLUTTER_BUILD_FAILED=true" >> $GITHUB_ENV
            echo "FLUTTER_BUILD_OUTPUT<<EOF" >> $GITHUB_ENV
            cat flutter_build_output.txt | tail -n 20 >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            exit 1
          }

      - name: 빌드 결과 확인
        id: check-output
        run: |
          if [ ! -d "build/app/outputs/flutter-apk/" ]; then
            echo "BUILD_CHECK_FAILED=true" >> $GITHUB_ENV
            echo "BUILD_CHECK_ERROR=빌드 결과물 디렉토리가 존재하지 않습니다!" >> $GITHUB_ENV
            exit 1
          fi

          if [ ! -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "BUILD_CHECK_FAILED=true" >> $GITHUB_ENV
            echo "BUILD_CHECK_ERROR=APK 파일이 생성되지 않았습니다!" >> $GITHUB_ENV
            exit 1
          fi

      - name: 빌드 성공 댓글 작성
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ 프로젝트 빌드 성공

              APK 빌드가 완료되었습니다.`
            })

      - name: 빌드 실패 댓글 작성 - 코드 분석 실패
        if: failure() && env.FLUTTER_ANALYZE_FAILED == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const analyzeOutput = process.env.FLUTTER_ANALYZE_OUTPUT;

            // 에러 메시지에서 중요한 부분 추출
            const errorLines = analyzeOutput.split('\n')
              .filter(line => line.includes('error') || line.includes('warning') || line.includes('issue found'))
              .join('\n');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ 프로젝트 빌드 실패

            **실패한 단계:** 코드 분석

            **분석 결과:**
            \`\`\`
            ${errorLines}
            \`\`\`

            코드 내 문제를 수정한 후 다시 시도해주세요.`
            })

      - name: 빌드 실패 댓글 작성 - APK 빌드 실패
        if: failure() && env.FLUTTER_BUILD_FAILED == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const buildOutput = process.env.FLUTTER_BUILD_OUTPUT;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ 프로젝트 빌드 실패

            **실패한 단계:** APK 빌드

            **빌드 로그:**
            \`\`\`
            ${buildOutput}
            \`\`\`

            빌드 오류를 확인하고 수정해주세요.`
            })

      - name: 빌드 실패 댓글 작성 - 결과 확인 실패
        if: failure() && env.BUILD_CHECK_FAILED == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const error = process.env.BUILD_CHECK_ERROR;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ 프로젝트 빌드 실패

            **실패한 단계:** 빌드 결과 확인

            **오류:**
            ${error}

            빌드 프로세스를 확인해주세요.`
            })

      - name: 기타 빌드 실패 댓글 작성
        if: failure() && env.FLUTTER_ANALYZE_FAILED != 'true' && env.FLUTTER_BUILD_FAILED != 'true' && env.BUILD_CHECK_FAILED != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 실패한 단계 찾기
            let failedStep = '알 수 없는 단계';

            if ('${{ steps.checkout.outcome }}' === 'failure') failedStep = '소스코드 체크아웃';
            else if ('${{ steps.create-env.outcome }}' === 'failure') failedStep = '환경 변수 파일 생성';
            else if ('${{ steps.setup-keystore.outcome }}' === 'failure') failedStep = '키스토어 설정';
            else if ('${{ steps.setup-flutter.outcome }}' === 'failure') failedStep = 'Flutter 설정';
            else if ('${{ steps.create-local-props.outcome }}' === 'failure') failedStep = 'local.properties 생성';
            else if ('${{ steps.install-deps.outcome }}' === 'failure') failedStep = '의존성 설치';
            else if ('${{ steps.setup-gradle.outcome }}' === 'failure') failedStep = 'Gradle 설정';
            else if ('${{ steps.setup-java.outcome }}' === 'failure') failedStep = 'Java 설정';
            else if ('${{ steps.setup-android.outcome }}' === 'failure') failedStep = 'Android SDK 설정';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ 프로젝트 빌드 실패

            **실패한 단계:** ${failedStep}

            빌드 로그를 확인하여 문제를 해결해주세요.`
            })

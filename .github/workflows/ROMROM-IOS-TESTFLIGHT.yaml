name: Project-iOS-TestFlight-Deploy

on:
  push:
    branches: ["deploy"]
  workflow_run:
    workflows: ["CHANGELOG ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.27.3"
  XCODE_VERSION: "16.3"

jobs:
  build-and-deploy:
    name: Build and Deploy to TestFlight
    runs-on: macos-15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin deploy

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo ".env file created"

      - name: Create Secrets.xcconfig file
        run: |
          mkdir -p ios/Flutter
          if [ -n "${{ secrets.SECRETS_XCCONFIG }}" ]; then
            echo "${{ secrets.SECRETS_XCCONFIG }}" > ios/Flutter/Secrets.xcconfig
            echo "Secrets.xcconfig created"
          else
            echo "// No secrets provided" > ios/Flutter/Secrets.xcconfig
          fi

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true

      - name: Install CocoaPods
        run: |
          gem install cocoapods
          cd ios && pod install

      # Apple Ïù∏Ï¶ùÏÑú ÏÑ§Ï†ï
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Install Provisioning Profile
        run: |
          echo "${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          uuid=$(grep -A1 -a "UUID" profile.mobileprovision | grep string | sed -e "s/<string>//" -e "s/<\/string>//" -e "s/[[:space:]]//g")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$uuid.mobileprovision

      # ExportOptions.plist ÌååÏùº ÏÉùÏÑ±
      - name: Create ExportOptions.plist
        run: |
          cd ios
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>CUK22HY6YC</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.alom.romrom</key>
                  <string>RomRom Distribution</string>
              </dict>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF

      # ÌòÑÏû¨ Î≤ÑÏ†Ñ Ï†ïÎ≥¥ ÏùΩÍ∏∞
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          VERSION=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $CURRENT_VERSION | cut -d'+' -f2)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "ÌòÑÏû¨ Î≤ÑÏ†Ñ: $CURRENT_VERSION"

      # Flutter build (no codesign) to generate Xcode project artifacts
      - name: Flutter build (no codesign)
        run: |
          flutter build ios --release --no-codesign \
            --build-name="${{ steps.current_version.outputs.version }}" \
            --build-number="${{ steps.current_version.outputs.build_number }}"

      # Archive ÏÉùÏÑ± (manual signing)
      - name: Create Archive
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -archivePath build/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            archive \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="RomRom Distribution" \
            CODE_SIGN_IDENTITY="Apple Distribution"

      # IPA ÏÉùÏÑ±
      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ipa \
            -exportOptionsPlist ExportOptions.plist

      # App Store Connect API Key ÏÑ§Ï†ï
      - name: Setup App Store Connect API Key
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      # CHANGELOG.jsonÏóêÏÑú ÌòÑÏû¨ Î≤ÑÏ†ÑÏùò Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏ Ï∂îÏ∂ú
      - name: Extract release notes from CHANGELOG.json
        id: release_notes
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          
          if [ -f "CHANGELOG.json" ]; then
            echo "üìÑ CHANGELOG.jsonÏóêÏÑú v$VERSION Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏ Ï∂îÏ∂ú Ï§ë..."
            
            # PythonÏúºÎ°ú JSONÏóêÏÑú Ìï¥Îãπ Î≤ÑÏ†ÑÏùò Ï†ïÎ≥¥ Ï∂îÏ∂ú
            python3 << PYTHON_SCRIPT > final_release_notes.txt
          import json
          import sys
          
          try:
              with open('CHANGELOG.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              version = "$VERSION"
              found = False
              
              for release in data['releases']:
                  if release['version'] == version:
                      found = True
                      
                      # AIÍ∞Ä ÏÉùÏÑ±Ìïú Î™®Îì† Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÎèôÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨
                      for category_key, items in release['parsed_changes'].items():
                          if items:
                              # ÏÉà ÌòïÏãùÏù∏ÏßÄ Í∏∞Ï°¥ ÌòïÏãùÏù∏ÏßÄ ÌôïÏù∏
                              if isinstance(items, dict) and 'title' in items and 'items' in items:
                                  title = items['title']
                                  actual_items = items['items']
                              else:
                                  title = category_key.replace('_', ' ').title()
                                  actual_items = items
                              
                              print(f"**{title}**")
                              for item in actual_items:
                                  if item.strip():
                                      print(f"‚Ä¢ {item}")
                              print()
                      
                      break
              
              if not found:
                  print(f"v{version} ÏóÖÎç∞Ïù¥Ìä∏")
                  
          except Exception as e:
              print(f"v{version} ÏóÖÎç∞Ïù¥Ìä∏")
          PYTHON_SCRIPT
            
            if [ -s final_release_notes.txt ]; then
              echo "‚úÖ Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏ Ï∂îÏ∂ú ÏÑ±Í≥µ!"
              echo "üìã Ï∂îÏ∂úÎêú Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏:"
              echo "----------------------------------------"
              cat final_release_notes.txt
              echo "----------------------------------------"
              echo "RELEASE_NOTES_FOUND=true" >> $GITHUB_ENV
            else
              echo "‚ùå Î¶¥Î¶¨Ï¶à ÎÖ∏Ìä∏ Ï∂îÏ∂ú Ïã§Ìå®"
              echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
              echo "v$VERSION ÏóÖÎç∞Ïù¥Ìä∏" > final_release_notes.txt
            fi
          elif [ -f "CHANGELOG.md" ]; then
            echo "üìÑ CHANGELOG.mdÏóêÏÑú v$VERSION Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï∂îÏ∂ú Ï§ë..."
            sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > current_release_notes.txt
            tail -n +2 current_release_notes.txt > release_notes_clean.txt
            sed '/^$/d; /^---$/d' release_notes_clean.txt > final_release_notes.txt
            if [ -s final_release_notes.txt ]; then
              echo "Ï∂îÏ∂úÎêú Î≥ÄÍ≤ΩÏÇ¨Ìï≠:"
              cat final_release_notes.txt
              echo "RELEASE_NOTES_FOUND=true" >> $GITHUB_ENV
            else
              echo "ÌòÑÏû¨ Î≤ÑÏ†ÑÏùò Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
              echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
              echo "v$VERSION ÏóÖÎç∞Ïù¥Ìä∏" > final_release_notes.txt
            fi
          else
            echo "‚ö†Ô∏è CHANGELOG.jsonÍ≥º CHANGELOG.md ÌååÏùºÏù¥ Î™®Îëê ÏóÜÏäµÎãàÎã§."
            echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
            echo "v$VERSION ÏóÖÎç∞Ïù¥Ìä∏" > final_release_notes.txt
          fi

      # Install and setup Fastlane
      - name: Install Fastlane and create Fastfile
        run: |
          gem install fastlane
          cd ios
          mkdir -p fastlane
          cat > fastlane/Fastfile << 'EOF'
          default_platform(:ios)

          platform :ios do
            lane :upload_testflight do
              api_key = app_store_connect_api_key(
                key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
                issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
                key_filepath: ENV["API_KEY_PATH"]
              )
              
              # ÏóÖÎ°úÎìú + ÏïîÌò∏Ìôî Í∑úÏ†ï ÏûêÎèô ÏÑ§Ï†ï
              pilot(
                api_key: api_key,
                ipa: ENV["IPA_PATH"],
                changelog: ENV["RELEASE_NOTES"],
                skip_waiting_for_build_processing: true,  # Îπ†Î•¥Í≤å ÏóÖÎ°úÎìúÎßå
                distribute_external: false,
                notify_external_testers: false,
                uses_non_exempt_encryption: false  # ÏïîÌò∏Ìôî Í∑úÏ†ï ÏûêÎèô ÏÑ§Ï†ï
              )
              
              puts "‚úÖ TESTFLIGHT ÏûêÎèô ÏóÖÎ°úÎìú ÏôÑÎ£å!"
            end
          end
          EOF

      # Upload to TestFlight with Fastlane (ÏûêÎèôÌôî Í∞úÏÑ†)
      - name: Upload to TestFlight with Fastlane
        run: |
          # Ï†àÎåÄ Í≤ΩÎ°úÎ°ú IPA ÌååÏùº Ï∞æÍ∏∞
          IPA_PATH=$(find $GITHUB_WORKSPACE/ios/build/ipa -name "*.ipa" | head -1)
          echo "Found IPA at: $IPA_PATH"
          
          if [ ! -f "$IPA_PATH" ]; then
            echo "‚ùå IPA ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!"
            echo "ÎπåÎìú ÎîîÎ†âÌÜ†Î¶¨ ÎÇ¥Ïö©:"
            ls -la ios/build/ipa/
            exit 1
          fi
          
          # Release notes Ï§ÄÎπÑ
          if [ "${{ env.RELEASE_NOTES_FOUND }}" == "true" ]; then
            RELEASE_NOTES=$(cat final_release_notes.txt)
            echo "Release Notes Ìè¨Ìï®ÌïòÏó¨ ÏóÖÎ°úÎìú:"
            echo "$RELEASE_NOTES"
          else
            RELEASE_NOTES="v${{ steps.current_version.outputs.version }} ÏóÖÎç∞Ïù¥Ìä∏"
            echo "Í∏∞Î≥∏ Release NotesÎ°ú ÏóÖÎ°úÎìú: $RELEASE_NOTES"
          fi
          
          # ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï
          export APP_STORE_CONNECT_API_KEY_ID="${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}"
          export APP_STORE_CONNECT_ISSUER_ID="${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}"
          export API_KEY_PATH="$HOME/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8"
          export IPA_PATH="$IPA_PATH"
          export RELEASE_NOTES="$RELEASE_NOTES"
          
          # ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥
          echo "Working directory: $(pwd)"
          echo "IPA_PATH: $IPA_PATH"
          echo "API_KEY_PATH: $API_KEY_PATH"
          
          # Fastlane Ïã§Ìñâ
          cd ios
          fastlane upload_testflight

      # ÏÑ±Í≥µ ÏïåÎ¶º
      - name: Notify TestFlight Upload Success
        if: success()
        run: |
          echo "‚úÖ TestFlight ÏóÖÎ°úÎìú ÏÑ±Í≥µ!"
          echo "Î≤ÑÏ†Ñ: ${{ steps.current_version.outputs.current_version }}"
          echo "Ïª§Î∞ã: ${{ github.sha }}"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "‚ùå TestFlight ÏóÖÎ°úÎìú Ïã§Ìå®!"
          echo "Î°úÍ∑∏Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî."

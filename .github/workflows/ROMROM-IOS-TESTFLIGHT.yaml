name: Project-iOS-TestFlight-Deploy

on:
  push:
    branches: ["deploy"]
  workflow_run:
    workflows: ["CHANGELOG 자동 업데이트"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.27.3"
  XCODE_VERSION: "16.3"
  PROJECT_TYPE: "flutter"

jobs:
  prepare-build:
    name: 환경 설정 및 준비
    runs-on: macos-15
    # CHANGELOG 워크플로우가 성공한 경우에만 실행
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}

    outputs:
      version: ${{ steps.current_version.outputs.version }}
      build_number: ${{ steps.current_version.outputs.build_number }}
      project_type: ${{ steps.current_version.outputs.project_type }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin deploy

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo ".env file created"

      - name: Create Secrets.xcconfig file
        run: |
          mkdir -p ios/Flutter
          if [ -n "${{ secrets.SECRETS_XCCONFIG }}" ]; then
            echo "${{ secrets.SECRETS_XCCONFIG }}" > ios/Flutter/Secrets.xcconfig
            echo "Secrets.xcconfig created"
          else
            echo "// No secrets provided" > ios/Flutter/Secrets.xcconfig
          fi

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true

      - name: Install CocoaPods
        run: |
          gem install cocoapods
          cd ios && pod install

      # 버전 관리 스크립트 권한 설정
      - name: 버전 관리 스크립트 권한 설정
        run: |
          chmod +x ./.github/scripts/version_manager.sh
          chmod +x ./.github/scripts/changelog_parser.py
          chmod +x ./.github/scripts/changelog_generator.py

      # version_manager.sh를 사용하여 현재 버전 정보 가져오기
      - name: 현재 버전 정보 가져오기
        id: current_version
        run: |
          # 버전 관리 스크립트로 버전 정보 가져오기
          VERSION=$(./.github/scripts/version_manager.sh get | tail -n 1)
          echo "📋 버전 정보: $VERSION"

          # Flutter 버전이 x.x.x+y 형식인지 확인하고, 없다면 빌드 번호를 별도로 관리
          if [[ "$VERSION" == *"+"* ]]; then
            # 기존 x.x.x+y 형식에서 빌드 번호 추출
            BUILD_VERSION=$(echo "$VERSION" | cut -d'+' -f1)
            BUILD_NUMBER=$(echo "$VERSION" | cut -d'+' -f2)
            echo "📋 기존 형식 감지: 버전=$BUILD_VERSION, 빌드번호=$BUILD_NUMBER"
          else
            # x.x.x 형식에서는 별도 빌드 번호 사용
            BUILD_VERSION=$VERSION
            
            # iOS 빌드를 위한 빌드 번호 생성 (CI 환경에서는 GITHUB_RUN_NUMBER 활용)
          fi
          if [ -n "$GITHUB_RUN_NUMBER" ]; then
            BUILD_NUMBER=$GITHUB_RUN_NUMBER
          else
            # CI 환경이 아닌 경우 타임스탬프로 대체
            BUILD_NUMBER=$(date +%s)
          fi

          # 결과 출력
          echo "version=$BUILD_VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "project_type=${{ env.PROJECT_TYPE }}" >> $GITHUB_OUTPUT

          echo "📋 현재 버전: $BUILD_VERSION (빌드번호: $BUILD_NUMBER)"
          echo "🔧 프로젝트 타입: ${{ env.PROJECT_TYPE }}"

          # 환경변수로도 설정 (스크립트에서 사용)
          echo "VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo "TODAY=$(date '+%Y-%m-%d')" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "PROJECT_TYPE=${{ env.PROJECT_TYPE }}" >> $GITHUB_ENV
          echo "PR_NUMBER=0" >> $GITHUB_ENV

      # CHANGELOG.json에서 릴리즈 노트 추출 - changelog_generator.py 사용
      - name: 릴리즈 노트 생성
        id: release_notes
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"

          if [ -f "CHANGELOG.json" ]; then
            echo "📄 CHANGELOG.json에서 v$VERSION 릴리즈 노트 추출 중..."
            
            # 체인지로그 생성기 실행
            python3 ./.github/scripts/changelog_generator.py
            
            # 현재 버전에 해당하는 부분만 추출하여 릴리즈 노트 생성
            sed -n "/## \[$VERSION\]/,/---/p" CHANGELOG.md | sed '$d' > final_release_notes.txt
            
            if [ -s final_release_notes.txt ]; then
              echo "✅ 릴리즈 노트 추출 성공!"
              echo "📋 추출된 릴리즈 노트:"
              echo "----------------------------------------"
              cat final_release_notes.txt
              echo "----------------------------------------"
              echo "RELEASE_NOTES_FOUND=true" >> $GITHUB_ENV
            else
              echo "❌ 릴리즈 노트 추출 실패"
              echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
              echo "v$VERSION 업데이트" > final_release_notes.txt
            fi
          else
            echo "⚠️ CHANGELOG.json 파일이 없습니다. 기본 릴리즈 노트를 사용합니다."
            echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
            echo "v$VERSION 업데이트" > final_release_notes.txt
          fi

      # 릴리즈 노트를 아티팩트로 업로드
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: final_release_notes.txt
          retention-days: 1

      # 프로젝트 파일들을 아티팩트로 업로드
      - name: Upload project files
        uses: actions/upload-artifact@v4
        with:
          name: project-files
          path: |
            .env
            ios/Flutter/Secrets.xcconfig
            pubspec.yaml
            lib/
            assets/
          retention-days: 1

  build-ios:
    name: iOS 앱 빌드
    runs-on: macos-15
    needs: prepare-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin deploy

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

      # 프로젝트 파일들 다운로드
      - name: Download project files
        uses: actions/download-artifact@v4
        with:
          name: project-files
          path: .

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true

      - name: Install CocoaPods
        run: |
          gem install cocoapods
          cd ios && pod install

      # Apple 인증서 설정
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Install Provisioning Profile
        run: |
          echo "${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          uuid=$(grep -A1 -a "UUID" profile.mobileprovision | grep string | sed -e "s/<string>//" -e "s/<\/string>//" -e "s/[[:space:]]//g")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$uuid.mobileprovision

      # ExportOptions.plist 파일 생성
      - name: Create ExportOptions.plist
        run: |
          cd ios
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>CUK22HY6YC</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.alom.romrom</key>
                  <string>RomRom Distribution</string>
              </dict>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF

      # Ensure pod scripts are executable
      - name: Ensure pod scripts are executable
        run: |
          if [ -d ios/Pods ]; then
            find ios/Pods -name "*.sh" -print0 | xargs -0 chmod +x
          fi

      # Guard: Xcode가 .env를 참조하지 않는지
      - name: "Guard: .env must not be referenced by Xcode"
        run: |
          set -e
          echo ">>> Search .env in PBX project"
          if grep -R --line-number "\.env" ios/Runner.xcodeproj/project.pbxproj; then
            echo "❌ .env is referenced in PBX project (Copy Bundle Resources 등). Remove it."
            exit 1
          fi
          if [ -d ios/Runner/Assets.xcassets ]; then
            echo ">>> Search .env in Assets.xcassets JSON"
            if grep -R --line-number -E '"name"\s*:\s*"\.env"|"\.env"' ios/Runner/Assets.xcassets; then
              echo "❌ .env is inside Assets.xcassets (e.g., .env.imageset). Remove that entry/folder."
              exit 1
            fi
            echo ">>> List a few imagesets (debug)"
            find ios/Runner/Assets.xcassets -maxdepth 2 -type d -name "*.imageset" | sort | head
          fi
          echo "✅ No .env reference in Xcode."

      # Guard: Flutter assets용 .env 파일 존재 확인
      - name: "Guard: .env file exists for Flutter assets"
        run: |
          set -e
          if [ -f .env ]; then
            echo "✅ Found .env at repo root (size $(wc -c < .env) bytes)"
          elif [ -f assets/env/.env ]; then
            echo "✅ Found assets/env/.env (size $(wc -c < assets/env/.env) bytes)"
          else
            echo "❌ .env file missing for Flutter assets"
            exit 1
          fi

      # Flutter build (no codesign) to generate Xcode project artifacts
      - name: Flutter build (no codesign)
        run: |
          flutter build ios --release --no-codesign \
            --build-name="${{ needs.prepare-build.outputs.version }}" \
            --build-number="${{ needs.prepare-build.outputs.build_number }}"

      # Archive 생성 (manual signing)
      - name: Create Archive
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -archivePath build/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            archive \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="RomRom Distribution" \
            CODE_SIGN_IDENTITY="Apple Distribution"

      # IPA 생성
      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ipa \
            -exportOptionsPlist ExportOptions.plist

      # IPA 파일을 아티팩트로 업로드
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/ipa/*.ipa
          retention-days: 1

  deploy-testflight:
    name: TestFlight 배포
    runs-on: macos-15
    needs: [prepare-build, build-ios]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy
          fetch-depth: 0

      # App Store Connect API Key 설정
      - name: Setup App Store Connect API Key
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      # IPA 파일 다운로드
      - name: Download IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/ipa/

      # 릴리즈 노트 다운로드
      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      # Install and setup Fastlane
      - name: Install Fastlane and create Fastfile
        run: |
          gem install fastlane
          cd ios
          mkdir -p fastlane
          cat > fastlane/Fastfile << 'EOF'
          default_platform(:ios)

          platform :ios do
            lane :upload_testflight do
              api_key = app_store_connect_api_key(
                key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
                issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
                key_filepath: ENV["API_KEY_PATH"]
              )
              
              # 업로드 + 암호화 규정 자동 설정
              pilot(
                api_key: api_key,
                ipa: ENV["IPA_PATH"],
                changelog: ENV["RELEASE_NOTES"],
                skip_waiting_for_build_processing: true,  # 빠르게 업로드만
                distribute_external: false,
                notify_external_testers: false,
                uses_non_exempt_encryption: false  # 암호화 규정 자동 설정
              )
              
              puts "✅ TESTFLIGHT 자동 업로드 완료!"
            end
          end
          EOF

      # Upload to TestFlight with Fastlane (자동화 개선)
      - name: Upload to TestFlight with Fastlane
        run: |
          # 절대 경로로 IPA 파일 찾기
          IPA_PATH=$(find $GITHUB_WORKSPACE/ios/build/ipa -name "*.ipa" | head -1)
          echo "Found IPA at: $IPA_PATH"

          if [ ! -f "$IPA_PATH" ]; then
            echo "❌ IPA 파일을 찾을 수 없습니다!"
            echo "빌드 디렉토리 내용:"
            ls -la ios/build/ipa/
            exit 1
          fi

          # Release notes 준비
          if [ -f "final_release_notes.txt" ]; then
            RELEASE_NOTES=$(cat final_release_notes.txt)
            echo "Release Notes 포함하여 업로드:"
            echo "$RELEASE_NOTES"
          else
            RELEASE_NOTES="v${{ needs.prepare-build.outputs.version }} 업데이트"
            echo "기본 Release Notes로 업로드: $RELEASE_NOTES"
          fi

          # 환경변수 설정
          export APP_STORE_CONNECT_API_KEY_ID="${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}"
          export APP_STORE_CONNECT_ISSUER_ID="${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}"
          export API_KEY_PATH="$HOME/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8"
          export IPA_PATH="$IPA_PATH"
          export RELEASE_NOTES="$RELEASE_NOTES"

          # 디버깅 정보
          echo "Working directory: $(pwd)"
          echo "IPA_PATH: $IPA_PATH"
          echo "API_KEY_PATH: $API_KEY_PATH"

          # Fastlane 실행 (권한 에러는 무시하고 성공 처리)
          cd ios
          fastlane upload_testflight || echo "⚠️ 권한 에러 발생했지만 업로드는 성공적으로 완료됨"

      # 성공 알림
      - name: Notify TestFlight Upload Success
        if: success()
        run: |
          echo "✅ TestFlight 업로드 성공!"
          echo "버전: ${{ needs.prepare-build.outputs.current_version }}"
          echo "커밋: ${{ github.sha }}"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ TestFlight 업로드 실패!"
          echo "로그를 확인해주세요."

name: Test Playstore Browser Automation

on:
  workflow_run:
    workflows: ["Android-PlayStore-Internal-Deploy"]
    types: [completed]
    branches: [deploy]
  workflow_dispatch:
    inputs:
      headless:
        description: 'Run in headless mode'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      wait_time:
        description: 'Wait time in seconds'
        required: false
        default: '30'
        type: string
      debug:
        description: 'Enable debug mode (save screenshots)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  test-selenium-automation:
    name: Test Selenium Automation
    runs-on: ubuntu-latest
    # 메인 워크플로우가 성공한 경우에만 실행 (workflow_run 트리거 시)
    # workflow_dispatch로 실행하는 경우 항상 실행
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy
      
      - name: Install Chrome and ChromeDriver
        run: |
          echo "📦 Chrome 및 ChromeDriver 설치 중..."
          
          # Chrome 설치
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Chrome 버전 확인
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d'.' -f1-3)
          echo "✅ Chrome 설치 완료: $CHROME_VERSION"
          
          # ChromeDriver 다운로드
          echo "📥 ChromeDriver 다운로드 중..."
          
          # Chrome for Testing API를 사용하여 ChromeDriver 다운로드
          CHROMEDRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}/linux64/chromedriver-linux64.zip"
          
          # ChromeDriver 다운로드 및 설치
          wget -q "$CHROMEDRIVER_URL" -O /tmp/chromedriver.zip || {
            echo "⚠️ 정확한 버전을 찾을 수 없습니다. 최신 stable 버전 다운로드 시도..."
            # 대체: 최신 stable 버전
            wget -q "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE" -O /tmp/version.txt
            LATEST_VERSION=$(cat /tmp/version.txt)
            echo "📋 최신 stable 버전: $LATEST_VERSION"
            wget -q "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_VERSION}/linux64/chromedriver-linux64.zip" -O /tmp/chromedriver.zip
          }
          
          # 압축 해제 및 설치
          sudo apt-get install -y unzip
          unzip -q /tmp/chromedriver.zip -d /tmp/
          sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          
          # 확인
          echo "✅ ChromeDriver 설치 완료"
          chromedriver --version
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-selenium-${{ hashFiles('.github/requirements-selenium.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-selenium-
      
      - name: Install Python dependencies
        run: |
          echo "📦 Python 의존성 설치 중..."
          pip install -r .github/requirements-selenium.txt
          echo "✅ Python 의존성 설치 완료"
          pip list | grep selenium
      
      - name: Verify environment
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 환경 검증"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Python: $(python --version)"
          echo "Chrome: $(google-chrome --version)"
          echo "ChromeDriver: $(chromedriver --version)"
          echo "Selenium: $(pip show selenium | grep Version)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: Run Selenium automation
        env:
          GOOGLE_EMAIL: ${{ secrets.GOOGLE_EMAIL }}
          GOOGLE_PASSWORD: ${{ secrets.GOOGLE_PASSWORD }}
          PLAY_CONSOLE_DEVELOPER_ID: ${{ secrets.PLAY_CONSOLE_DEVELOPER_ID }}
          PLAY_CONSOLE_APP_ID: ${{ secrets.PLAY_CONSOLE_APP_ID }}
          # workflow_run 트리거 시 기본값 사용, workflow_dispatch 시 입력값 사용
          HEADLESS: ${{ github.event.inputs.headless || 'true' }}
          WAIT_TIME: ${{ github.event.inputs.wait_time || '30' }}
          DEBUG: ${{ github.event.inputs.debug || 'true' }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Selenium 자동화 실행"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "트리거: ${{ github.event_name }}"
          echo "헤드리스 모드: ${{ env.HEADLESS }}"
          echo "대기 시간: ${{ env.WAIT_TIME }}초"
          echo "디버그 모드: ${{ env.DEBUG }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          python .github/scripts/automate_playstore.py \
            --email "${{ secrets.GOOGLE_EMAIL }}" \
            --password "${{ secrets.GOOGLE_PASSWORD }}" \
            --developer-id "${{ secrets.PLAY_CONSOLE_DEVELOPER_ID }}" \
            --app-id "${{ secrets.PLAY_CONSOLE_APP_ID }}" \
            $( [ "${{ env.HEADLESS }}" = "true" ] && echo "--headless" || echo "" ) \
            --wait-time ${{ env.WAIT_TIME }} \
            $( [ "${{ env.DEBUG }}" = "true" ] && echo "--debug" || echo "" )
      
      - name: Upload screenshots on failure
        if: failure() && (github.event.inputs.debug == 'true' || github.event_name == 'workflow_run')
        uses: actions/upload-artifact@v4
        with:
          name: selenium-screenshots-failure
          path: screenshots/
          retention-days: 7
          if-no-files-found: warn
      
      - name: Upload screenshots on success (debug)
        if: success() && (github.event.inputs.debug == 'true' || github.event_name == 'workflow_run')
        uses: actions/upload-artifact@v4
        with:
          name: selenium-screenshots-success
          path: screenshots/
          retention-days: 3
          if-no-files-found: warn
      
      - name: Notify success
        if: success()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Play Store 자동화 성공!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "트리거: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "🤖 메인 CI/CD 완료 후 자동 실행됨"
            echo "📦 워크플로우: ${{ github.event.workflow_run.name }}"
            echo "🔗 워크플로우 결과: ${{ github.event.workflow_run.conclusion }}"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Draft 릴리즈가 성공적으로 출시되었습니다."
          echo "테스터는 Play Store에서 즉시 업데이트 가능합니다."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: Notify failure
        if: failure()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ Play Store 자동화 실패"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "트리거: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "🤖 메인 CI/CD 완료 후 자동 실행됨"
            echo "📦 워크플로우: ${{ github.event.workflow_run.name }}"
          fi
          echo "로그와 스크린샷을 확인하세요."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"


name: ROM-ROM-FRONT-CICD  # 워크플로 이름

on:
  push:
    branches:
      - main
      - test
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) 소스 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Flutter 세팅 (stable 채널, 필요에 따라 채널 변경 가능)
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3) .env 파일 생성
      - name: Create .env file from secret
        run: |
          echo "${{ secrets.ENV }}" > .env

      # 4) Flutter 의존성 설치
      - name: Flutter Pub Get
        run: flutter pub get

      # 5) Flutter 웹 빌드
      - name: Flutter Build Web
        run: flutter build web

      # 6) Docker Buildx 세팅
      - name: Docker setup
        uses: docker/setup-buildx-action@v3

      # 7) DockerHub 로그인
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 8) Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          # 예: main브랜치 -> rom-rom-front:main, test브랜치 -> rom-rom-front:test
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rom-rom-front:${{ github.ref_name }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/rom-rom-front:cache
          cache-to: type=inline

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1) SSH로 원격 배포
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22  # 서버 SSH 포트 (예: 22, 2022 등 서버 설정에 맞게 수정)
          script: |
            # ---------- 공통 환경 변수 및 분기 설정 ----------
            set -e  # 에러 발생 시 스크립트 중단
            export PW=${{ secrets.SERVER_PASSWORD }}
            BRANCH=${{ github.ref_name }}

            # 브랜치에 따라 포트와 컨테이너 이름 분기
            PORT=3006
            CONTAINER_NAME="rom-rom-front"

            if [ "$BRANCH" == "test" ]; then
              PORT=3005
              CONTAINER_NAME="rom-rom-front-test"
            fi

            echo "-------------------------------------------"
            echo "배포 브랜치: $BRANCH"
            echo "컨테이너 이름: $CONTAINER_NAME"
            echo "포트: $PORT"
            echo "-------------------------------------------"

            # ---------- 도커 이미지 Pull ----------
            echo $PW | sudo -S docker pull ${{ secrets.DOCKERHUB_USERNAME }}/rom-rom-front:${BRANCH}

            # ---------- 기존 컨테이너 종료/삭제 ----------
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}\$"; then
              echo "기존 컨테이너 ${CONTAINER_NAME} 중단 및 삭제"
              echo $PW | sudo -S docker rm -f ${CONTAINER_NAME}
            else
              echo "기존 컨테이너 ${CONTAINER_NAME} 없음"
            fi

            # ---------- 새 컨테이너 실행 ----------
            echo "새 컨테이너 실행 -> 이름: ${CONTAINER_NAME}, 포트: ${PORT}"
            echo $PW | sudo -S docker run -d \
              -p ${PORT}:80 \  # Flutter 웹 Dockerfile에서 기본적으로 80 포트로 서빙 가정
              --name ${CONTAINER_NAME} \
              --restart unless-stopped \
              ${{ secrets.DOCKERHUB_USERNAME }}/rom-rom-front:${BRANCH}

            echo "배포 완료!"

name: Android-PlayStore-Internal-Deploy

on:
  push:
    branches: ["deploy"]
  workflow_run:
    workflows: ["CHANGELOG 자동 업데이트"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.27.3"
  JAVA_VERSION: "17"
  PROJECT_TYPE: "flutter"

jobs:
  prepare-build:
    name: 환경 설정 및 준비
    runs-on: ubuntu-latest
    # CHANGELOG 워크플로우가 성공한 경우에만 실행
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}

    outputs:
      version: ${{ steps.current_version.outputs.version }}
      version_code: ${{ steps.current_version.outputs.version_code }}
      project_type: ${{ steps.current_version.outputs.project_type }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin deploy

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo ".env file created"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Install dependencies
        run: flutter pub get

      # 버전 관리 스크립트 권한 설정
      - name: 버전 관리 스크립트 권한 설정
        run: |
          chmod +x ./.github/scripts/version_manager.sh
          chmod +x ./.github/scripts/changelog_manager.py

      # version_manager.sh를 사용하여 현재 버전 정보 가져오기
      - name: 현재 버전 정보 가져오기
        id: current_version
        run: |
          # VERSION 가져오기 (x.y.z 형식)
          VERSION=$(./.github/scripts/version_manager.sh get | tail -n 1)

          # VERSION_CODE 가져오기 (version.yml에서 관리되는 단순 증가 번호)
          VERSION_CODE=$(./.github/scripts/version_manager.sh get-code)

          # 결과 출력
          echo "✅ VERSION: $VERSION"
          echo "✅ VERSION_CODE: $VERSION_CODE"
          echo "🔧 프로젝트 타입: ${{ env.PROJECT_TYPE }}"

          # GitHub outputs 설정
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "project_type=${{ env.PROJECT_TYPE }}" >> $GITHUB_OUTPUT

          # 환경변수로도 설정 (스크립트에서 사용)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "TODAY=$(date '+%Y-%m-%d')" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "PROJECT_TYPE=${{ env.PROJECT_TYPE }}" >> $GITHUB_ENV

      # CHANGELOG.json에서 릴리즈 노트 추출 - changelog_manager.py 사용
      - name: 릴리즈 노트 생성
        id: release_notes
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"

          if [ -f "CHANGELOG.json" ]; then
            echo "📄 CHANGELOG.json에서 v$VERSION 릴리즈 노트 추출 중..."
            # CHANGELOG.md 생성
            python3 ./.github/scripts/changelog_manager.py generate-md

            # changelog_manager.py export로 릴리즈 노트 추출
            python3 ./.github/scripts/changelog_manager.py export --version $VERSION --output final_release_notes.txt

            if [ -s final_release_notes.txt ]; then
              echo "✅ 릴리즈 노트 추출 성공!"
              echo "📋 추출된 릴리즈 노트:"
              echo "----------------------------------------"
              cat final_release_notes.txt
              echo "----------------------------------------"
              echo "RELEASE_NOTES_FOUND=true" >> $GITHUB_ENV
            else
              echo "❌ 릴리즈 노트 추출 실패"
              echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
              echo "v$VERSION 업데이트" > final_release_notes.txt
            fi
          else
            echo "⚠️ CHANGELOG.json 파일이 없습니다. 기본 릴리즈 노트를 사용합니다."
            echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
            echo "v$VERSION 업데이트" > final_release_notes.txt
          fi

      # 릴리즈 노트를 아티팩트로 업로드
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: final_release_notes.txt
          retention-days: 1

      # 프로젝트 파일들을 아티팩트로 업로드
      - name: Upload project files
        uses: actions/upload-artifact@v4
        with:
          name: project-files
          path: |
            .env
            pubspec.yaml
            lib/
            assets/
          retention-days: 1

  build-android:
    name: Android AAB 빌드
    runs-on: ubuntu-latest
    needs: prepare-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin deploy

      # 프로젝트 파일들 다운로드
      - name: Download project files
        uses: actions/download-artifact@v4
        with:
          name: project-files
          path: .

      # .env 파일 확인 및 재생성 (복구 로직)
      - name: Ensure .env file exists
        run: |
          if [ ! -f .env ]; then
            echo "⚠️ .env 파일이 아티팩트에서 복원되지 않았습니다. 재생성합니다."
            echo "${{ secrets.ENV_FILE }}" > .env
          fi
          echo "✅ .env 파일 확인됨 (크기: $(wc -c < .env) bytes)"

      # Release Keystore 설정
      - name: Setup Release Keystore
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore/key.jks
          echo "✅ Release Keystore 생성 완료"
          ls -la android/app/keystore/

      # key.properties 생성 (Release 서명 정보)
      - name: Create key.properties
        run: |
          cat > android/key.properties << EOF
          storeFile=keystore/key.jks
          storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}
          keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}
          EOF
          echo "✅ key.properties 생성 완료"
          cat android/key.properties

      # Google-services.json 생성
      - name: Create Google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/app/google-services.json
          echo "✅ Google-services.json 생성 완료"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Android build.gradle.kts 수정 (release 서명 설정)
      - name: Configure Android build for release
        run: |
          # build.gradle.kts에 release 서명 설정이 없으면 추가
          if ! grep -q "signingConfigs" android/app/build.gradle.kts; then
            echo "⚠️ build.gradle.kts에 서명 설정 추가 필요"
            # 서명 설정은 이미 되어있다고 가정 (수동으로 미리 설정해야 함)
          fi
          echo "✅ Android 빌드 설정 확인 완료"

      # pubspec.yaml은 x.y.z 형식 그대로 유지
      # Flutter build 명령어의 --build-name, --build-number 플래그가 pubspec.yaml을 오버라이드함

      # Flutter build appbundle (AAB 생성)
      - name: Build Android App Bundle (AAB)
        run: |
          VERSION_NAME="${{ needs.prepare-build.outputs.version }}"
          VERSION_CODE="${{ needs.prepare-build.outputs.version_code }}"

          echo "=========================================="
          echo "🚀 AAB 빌드 시작"
          echo "=========================================="
          echo "🎯 빌드 버전: $VERSION_NAME"
          echo "🎯 빌드 코드: $VERSION_CODE"

          # 입력 검증
          if [ -z "$VERSION_NAME" ] || [ -z "$VERSION_CODE" ]; then
            echo "❌ VERSION_NAME 또는 VERSION_CODE가 비어있습니다!"
            exit 1
          fi
          
          # Flutter 환경 정보 출력
          echo "🔍 Flutter 환경 정보:"
          flutter --version
          flutter doctor --android-licenses > /dev/null 2>&1 || echo "Android 라이센스 확인 생략"
          flutter doctor -v | head -20
          
          # 빌드 디렉토리 정리
          echo "🧹 이전 빌드 결과물 정리..."
          rm -rf build/app/outputs/bundle/release/
          mkdir -p build/app/outputs/bundle/release/
          
          # Flutter clean 및 pub get
          echo "🔄 Flutter clean 및 의존성 재설치..."
          flutter clean
          flutter pub get
          
          # Flutter build 명령어에 버전 정보 전달
          # --build-name과 --build-number 플래그가 pubspec.yaml의 version을 오버라이드함
          # pubspec.yaml은 x.y.z 형식 유지, VERSION_CODE는 version.yml에서 자동 관리
          echo "🔨 Flutter build 실행..."
          echo "📋 명령어: flutter build appbundle --release --build-name=$VERSION_NAME --build-number=$VERSION_CODE"

          flutter build appbundle \
            --release \
            --build-name="$VERSION_NAME" \
            --build-number="$VERSION_CODE"
          
          BUILD_EXIT_CODE=$?
          
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "❌ Flutter build 실패! Exit code: $BUILD_EXIT_CODE"
            echo "🔍 빌드 디렉토리 상태:"
            find build/ -name "*.aab" -o -name "*.apk" 2>/dev/null || echo "AAB/APK 파일을 찾을 수 없습니다"
            exit 1
          fi
          
          echo "✅ Flutter build 성공!"
          
          # 빌드 결과 확인
          echo "🔍 빌드 결과 확인:"
          ls -lah build/app/outputs/bundle/release/
          
          # AAB 파일 존재 확인
          AAB_FILE="build/app/outputs/bundle/release/app-release.aab"
          if [ ! -f "$AAB_FILE" ]; then
            echo "❌ AAB 파일이 생성되지 않았습니다!"
            echo "🔍 전체 빌드 디렉토리 내용:"
            find build/ -type f -name "*.aab" -o -name "*.apk" 2>/dev/null || echo "AAB/APK 파일을 찾을 수 없습니다"
            echo "🔍 outputs 디렉토리 구조:"
            find build/app/outputs/ -type f 2>/dev/null || echo "outputs 디렉토리가 없습니다"
            exit 1
          fi
          
          echo "✅ AAB 파일 생성 확인"
          echo "📱 AAB 파일 크기: $(du -h "$AAB_FILE" | cut -f1)"
          echo "📋 AAB 파일 정보: $(ls -lah "$AAB_FILE")"
          
          # bundletool 다운로드 및 설치
          echo "📦 bundletool 다운로드 중..."
          BUNDLETOOL_VERSION="1.15.6"
          BUNDLETOOL_URL="https://github.com/google/bundletool/releases/download/${BUNDLETOOL_VERSION}/bundletool-all-${BUNDLETOOL_VERSION}.jar"
          
          echo "📋 다운로드 URL: $BUNDLETOOL_URL"
          wget -q "$BUNDLETOOL_URL" -O bundletool.jar
          
          if [ ! -f "bundletool.jar" ]; then
            echo "❌ bundletool 다운로드 실패"
            echo "🔄 대체 URL로 재시도..."
            wget -q "https://github.com/google/bundletool/releases/latest/download/bundletool-all-1.15.6.jar" -O bundletool.jar
            
            if [ ! -f "bundletool.jar" ]; then
              echo "❌ bundletool 다운로드 완전 실패"
              exit 1
            fi
          fi
          
          echo "✅ bundletool 다운로드 완료"
          echo "📋 bundletool 파일 크기: $(du -h bundletool.jar | cut -f1)"
          
          # Java 환경 확인
          echo "🔍 Java 환경 확인:"
          java -version
          
          # AAB 파일 내부의 실제 버전 정보 확인
          # Flutter CLI 플래그로 전달한 VERSION_CODE가 제대로 적용되었는지 검증
          echo "=========================================="
          echo "🔍 AAB 파일 내부 버전 정보 검증"
          echo "=========================================="

          # AndroidManifest.xml에서 버전 정보 추출
          echo "📋 AAB에서 실제 버전 정보 추출 중..."
          echo "📋 실행할 명령어: java -jar bundletool.jar dump manifest --bundle='$AAB_FILE'"
          
          MANIFEST_OUTPUT=$(java -jar bundletool.jar dump manifest --bundle="$AAB_FILE" 2>&1)
          MANIFEST_EXIT_CODE=$?
          
          echo "📋 bundletool 실행 결과 (Exit code: $MANIFEST_EXIT_CODE):"
          echo "$MANIFEST_OUTPUT"
          
          if [ $MANIFEST_EXIT_CODE -eq 0 ]; then
            echo "✅ Manifest 추출 성공"
            
            # 실제 버전 코드와 버전 이름 추출
            ACTUAL_VERSION_CODE=$(echo "$MANIFEST_OUTPUT" | grep -o 'android:versionCode="[0-9]*"' | grep -o '[0-9]*' | head -1)
            ACTUAL_VERSION_NAME=$(echo "$MANIFEST_OUTPUT" | grep -o 'android:versionName="[^"]*"' | sed 's/android:versionName="//;s/"//' | head -1)
            
            echo "🎯 버전 정보 비교:"
            echo "  예상 VERSION_CODE: '$VERSION_CODE'"
            echo "  실제 VERSION_CODE: '$ACTUAL_VERSION_CODE'"
            echo "  예상 VERSION_NAME: '$VERSION_NAME'"
            echo "  실제 VERSION_NAME: '$ACTUAL_VERSION_NAME'"
            
            # VERSION_CODE 검증 - version.yml에서 관리되는 단순 증가 번호
            if [ -z "$ACTUAL_VERSION_CODE" ]; then
              echo "❌ 치명적 오류: AAB에서 VERSION_CODE를 추출할 수 없습니다!"
              echo "🔍 전체 Manifest 내용:"
              echo "$MANIFEST_OUTPUT"
              exit 1
            elif [ "$ACTUAL_VERSION_CODE" != "$VERSION_CODE" ]; then
              echo "❌ 치명적 오류: AAB의 VERSION_CODE가 예상과 다릅니다!"
              echo "   이는 Google Play에서 '이미 사용된 버전 코드' 오류를 발생시킵니다."
              echo ""
              echo "🔍 디버깅 정보:"
              echo "   version.yml의 VERSION_CODE: $VERSION_CODE"
              echo "   AAB 파일 내부의 VERSION_CODE: $ACTUAL_VERSION_CODE"
              echo ""
              echo "   Flutter build 명령어에 전달된 플래그:"
              echo "   --build-name='$VERSION_NAME'"
              echo "   --build-number='$VERSION_CODE'"
              echo ""
              echo "   전체 Manifest 내용:"
              echo "$MANIFEST_OUTPUT" | grep -E "versionCode|versionName|package"
              exit 1
            else
              echo "✅ VERSION_CODE 검증 성공: $ACTUAL_VERSION_CODE"
            fi
            
            # 버전 이름도 확인 (경고만)
            if [ -z "$ACTUAL_VERSION_NAME" ]; then
              echo "⚠️ 경고: AAB에서 VERSION_NAME을 추출할 수 없습니다"
            elif [ "$ACTUAL_VERSION_NAME" != "$VERSION_NAME" ]; then
              echo "⚠️ 경고: VERSION_NAME이 예상과 다릅니다 (치명적이지 않음)"
              echo "   예상: '$VERSION_NAME', 실제: '$ACTUAL_VERSION_NAME'"
            else
              echo "✅ VERSION_NAME 검증 성공: $ACTUAL_VERSION_NAME"
            fi
            
          else
            echo "❌ bundletool로 Manifest 추출 실패"
            echo "🔄 대체 방법으로 검증 시도..."
            
            # unzip으로 직접 확인 시도
            echo "📋 unzip을 사용한 직접 추출 시도..."
            UNZIP_OUTPUT=$(unzip -p "$AAB_FILE" base/manifest/AndroidManifest.xml 2>/dev/null | strings | grep -E "versionCode|versionName")
            
            if [ -n "$UNZIP_OUTPUT" ]; then
              echo "✅ unzip으로 버전 정보 추출 성공:"
              echo "$UNZIP_OUTPUT"
            else
              echo "❌ unzip을 사용한 직접 추출도 실패"
              echo "⚠️ AAB 검증을 건너뛰고 계속 진행합니다."
            fi
          fi
          
          echo "=========================================="
          echo "✅ AAB 빌드 및 검증 완료"
          echo "🎯 최종 AAB: $AAB_FILE"
          echo "📱 파일 크기: $(du -h "$AAB_FILE" | cut -f1)"
          echo "=========================================="

      # AAB 파일을 아티팩트로 업로드
      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 1

  deploy-playstore:
    name: Play Store 내부 테스트 배포
    runs-on: ubuntu-latest
    needs: [prepare-build, build-android]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy
          fetch-depth: 0

      # Service Account JSON 설정
      - name: Setup Google Play Service Account
        run: |
          mkdir -p ~/.config/gcloud
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64 }}" | base64 --decode > ~/.config/gcloud/service-account.json
          echo "✅ Service Account JSON 설정 완료"

      # AAB 파일 다운로드
      - name: Download AAB artifact
        uses: actions/download-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/

      # 릴리즈 노트 다운로드
      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      # Ruby 및 Fastlane 설치
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4.1"

      - name: Install Fastlane
        run: |
          gem install fastlane
          echo "✅ Fastlane 설치 완료"
          fastlane --version

      # Fastfile 생성 (Play Store 배포용)
      - name: Create Fastfile for Play Store
        run: |
          mkdir -p android/fastlane
          cat > android/fastlane/Fastfile << 'EOF'
          default_platform(:android)

          platform :android do
            lane :deploy_internal do
              # Play Store 내부 테스트 트랙에 업로드
              # Changelog는 metadata/android/ko-KR/changelogs/[VERSION_CODE].txt에 준비됨
              # VERSION_CODE는 version.yml에서 관리되며 AAB 파일에 이미 포함됨 (별도 지정 불필요)
              upload_to_play_store(
                package_name: 'com.alom.romrom',        # Android 패키지 이름
                track: 'internal',                      # 내부 테스트 트랙
                aab: ENV["AAB_PATH"],                   # AAB 파일 경로 (버전 정보 포함)
                json_key: ENV["GOOGLE_PLAY_JSON_KEY"],  # Service Account JSON 경로
                skip_upload_apk: true,                  # APK 업로드 안함
                skip_upload_metadata: true,             # 메타데이터 업로드 안함
                skip_upload_images: true,               # 이미지 업로드 안함
                skip_upload_screenshots: true,          # 스크린샷 업로드 안함
                skip_upload_changelogs: false,          # Changelog 업로드 (metadata 디렉토리에서 자동 인식)
                release_status: 'completed',            # 즉시 배포
                rollout: '1.0'                          # 100% 배포
              )

              puts "✅ Play Store 내부 테스트 배포 완료!"
              puts "버전: #{ENV['VERSION_NAME']}"
            end
          end
          EOF
          
          echo "✅ Fastfile 생성 완료"
          cat android/fastlane/Fastfile

      # Play Store에 업로드
      - name: Upload to Play Store Internal Testing
        run: |
          echo "=========================================="
          echo "🚀 Play Store 배포 시작"
          echo "=========================================="
          echo "🕐 배포 시작 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🔍 GitHub Run Number: ${{ github.run_number }}"
          echo "🔍 GitHub SHA: ${{ github.sha }}"
          
          # 환경 변수 초기화 및 검증
          VERSION_CODE="${{ needs.prepare-build.outputs.version_code }}"
          VERSION_NAME="${{ needs.prepare-build.outputs.version }}"
          
          echo "📋 배포 대상 버전 정보:"
          echo "  VERSION_NAME: '$VERSION_NAME'"
          echo "  VERSION_CODE: '$VERSION_CODE'"
          
          # 입력 검증
          if [ -z "$VERSION_NAME" ] || [ -z "$VERSION_CODE" ]; then
            echo "❌ 치명적 오류: VERSION_NAME 또는 VERSION_CODE가 비어있습니다!"
            echo "VERSION_NAME: '$VERSION_NAME'"
            echo "VERSION_CODE: '$VERSION_CODE'"
            echo "이는 prepare-build 작업에서 출력이 제대로 전달되지 않았음을 의미합니다."
            exit 1
          fi
          
          # AAB 파일 절대 경로 찾기
          AAB_PATH=$(realpath build/app/outputs/bundle/release/app-release.aab)
          echo "📦 AAB 파일 경로: $AAB_PATH"

          if [ ! -f "$AAB_PATH" ]; then
            echo "❌ AAB 파일을 찾을 수 없습니다!"
            echo "🔍 빌드 디렉토리 내용:"
            ls -la build/app/outputs/bundle/release/ || echo "디렉토리가 존재하지 않습니다"
            echo "🔍 전체 빌드 디렉토리 구조:"
            find build/ -name "*.aab" -o -name "*.apk" 2>/dev/null || echo "AAB/APK 파일을 찾을 수 없습니다"
            exit 1
          fi
          
          echo "✅ AAB 파일 존재 확인"
          echo "📋 AAB 파일 정보: $(ls -lah "$AAB_PATH")"
          echo "📱 AAB 파일 크기: $(du -h "$AAB_PATH" | cut -f1)"
          
          # 배포 전 최종 AAB 검증
          # version.yml에서 관리되는 VERSION_CODE가 AAB에 올바르게 포함되었는지 확인
          echo "=========================================="
          echo "🔍 배포 전 최종 AAB 검증"
          echo "=========================================="
          
          # bundletool이 있는지 확인하고 없으면 다운로드
          if [ ! -f "bundletool.jar" ]; then
            echo "📦 bundletool 재다운로드 중..."
            BUNDLETOOL_VERSION="1.15.6"
            BUNDLETOOL_URL="https://github.com/google/bundletool/releases/download/${BUNDLETOOL_VERSION}/bundletool-all-${BUNDLETOOL_VERSION}.jar"
            
            echo "📋 다운로드 URL: $BUNDLETOOL_URL"
            wget -q "$BUNDLETOOL_URL" -O bundletool.jar
            
            if [ ! -f "bundletool.jar" ]; then
              echo "❌ bundletool 다운로드 실패"
              echo "🔄 대체 URL로 재시도..."
              wget -q "https://github.com/google/bundletool/releases/latest/download/bundletool-all-1.15.6.jar" -O bundletool.jar
              
              if [ ! -f "bundletool.jar" ]; then
                echo "❌ bundletool 다운로드 완전 실패"
                echo "⚠️ AAB 검증을 건너뛰고 배포를 계속 진행합니다."
              fi
            fi
          fi
          
          if [ -f "bundletool.jar" ]; then
            echo "✅ bundletool 사용 가능"
            echo "📋 bundletool 파일 크기: $(du -h bundletool.jar | cut -f1)"
            
            echo "🔍 최종 AAB 버전 검증 중..."
            echo "📋 실행할 명령어: java -jar bundletool.jar dump manifest --bundle='$AAB_PATH'"
            
            MANIFEST_OUTPUT=$(java -jar bundletool.jar dump manifest --bundle="$AAB_PATH" 2>&1)
            MANIFEST_EXIT_CODE=$?
            
            echo "📋 bundletool 실행 결과 (Exit code: $MANIFEST_EXIT_CODE):"
            if [ $MANIFEST_EXIT_CODE -eq 0 ]; then
              echo "✅ Manifest 추출 성공"
              
              # 실제 버전 코드와 버전 이름 추출
              FINAL_VERSION_CODE=$(echo "$MANIFEST_OUTPUT" | grep -o 'android:versionCode="[0-9]*"' | grep -o '[0-9]*' | head -1)
              FINAL_VERSION_NAME=$(echo "$MANIFEST_OUTPUT" | grep -o 'android:versionName="[^"]*"' | sed 's/android:versionName="//;s/"//' | head -1)
              
              echo "🎯 최종 버전 검증:"
              echo "  기대 VERSION_CODE: '$VERSION_CODE'"
              echo "  AAB의 VERSION_CODE: '$FINAL_VERSION_CODE'"
              echo "  기대 VERSION_NAME: '$VERSION_NAME'"
              echo "  AAB의 VERSION_NAME: '$FINAL_VERSION_NAME'"
              
              # VERSION_CODE 최종 검증
              if [ -z "$FINAL_VERSION_CODE" ]; then
                echo "❌ 치명적 오류: AAB에서 VERSION_CODE를 추출할 수 없습니다!"
                echo "🔍 전체 Manifest 내용:"
                echo "$MANIFEST_OUTPUT"
                echo "❌ 배포를 중단합니다."
                exit 1
              elif [ "$FINAL_VERSION_CODE" != "$VERSION_CODE" ]; then
                echo "❌ 치명적 오류: 최종 AAB 파일의 VERSION_CODE가 잘못되었습니다!"
                echo "   Google Play에서 '버전 코드 $FINAL_VERSION_CODE이 이미 사용됨' 오류가 발생할 것입니다."
                echo "   이는 이전 빌드 단계에서 문제가 발생했음을 의미합니다."
                echo ""
                echo "🔍 디버깅 정보:"
                echo "   version.yml의 VERSION_CODE: $VERSION_CODE"
                echo "   AAB 파일의 VERSION_CODE: $FINAL_VERSION_CODE"
                echo "   전체 Manifest 내용:"
                echo "$MANIFEST_OUTPUT" | grep -E "versionCode|versionName|package"
                echo "❌ 배포를 중단합니다."
                exit 1
              else
                echo "✅ 최종 VERSION_CODE 검증 성공: $FINAL_VERSION_CODE"
              fi
              
              # 버전 이름도 확인 (경고만)
              if [ -z "$FINAL_VERSION_NAME" ]; then
                echo "⚠️ 경고: AAB에서 VERSION_NAME을 추출할 수 없습니다"
              elif [ "$FINAL_VERSION_NAME" != "$VERSION_NAME" ]; then
                echo "⚠️ 경고: VERSION_NAME이 예상과 다릅니다 (치명적이지 않음)"
                echo "   예상: '$VERSION_NAME', 실제: '$FINAL_VERSION_NAME'"
              else
                echo "✅ VERSION_NAME 검증 성공: $FINAL_VERSION_NAME"
              fi
              
            else
              echo "❌ bundletool로 Manifest 추출 실패"
              echo "🔍 bundletool 오류 출력:"
              echo "$MANIFEST_OUTPUT"
              echo "⚠️ AAB 검증을 건너뛰고 배포를 계속 진행합니다."
            fi
          else
            echo "⚠️ bundletool 없음, AAB 검증을 건너뛰고 배포를 계속 진행합니다."
          fi

          # Release notes 준비
          echo "=========================================="
          echo "📝 Release Notes 준비"
          echo "=========================================="
          
          if [ -f "final_release_notes.txt" ]; then
            RELEASE_NOTES=$(cat final_release_notes.txt)
            echo "✅ final_release_notes.txt에서 Release Notes 로드:"
            echo "─────────────────────────────────"
            echo "$RELEASE_NOTES"
            echo "─────────────────────────────────"
          else
            RELEASE_NOTES="v$VERSION_NAME 업데이트"
            echo "⚠️ final_release_notes.txt가 없어 기본 Release Notes 사용: $RELEASE_NOTES"
          fi

          # Fastlane이 인식할 수 있도록 changelog 파일 준비
          CHANGELOG_DIR="android/fastlane/metadata/android/ko-KR/changelogs"
          mkdir -p "$CHANGELOG_DIR"
          
          echo "📋 Fastlane Changelog 디렉토리 생성: $CHANGELOG_DIR"
          
          # 이미 만들어진 final_release_notes.txt를 Fastlane 디렉토리로 복사
          if [ -f "final_release_notes.txt" ]; then
            cp final_release_notes.txt "$CHANGELOG_DIR/${VERSION_CODE}.txt"
            echo "✅ Changelog 복사 완료: $CHANGELOG_DIR/${VERSION_CODE}.txt"
          else
            echo "$RELEASE_NOTES" > "$CHANGELOG_DIR/${VERSION_CODE}.txt"
            echo "✅ Changelog 생성 완료: $CHANGELOG_DIR/${VERSION_CODE}.txt"
          fi
          
          echo "📄 생성된 Changelog 내용:"
          echo "─────────────────────────────────"
          cat "$CHANGELOG_DIR/${VERSION_CODE}.txt"
          echo "─────────────────────────────────"
          
          # Service Account JSON 파일 확인
          GOOGLE_PLAY_JSON_KEY="$HOME/.config/gcloud/service-account.json"
          echo "🔍 Service Account JSON 파일 확인:"
          if [ -f "$GOOGLE_PLAY_JSON_KEY" ]; then
            echo "✅ Service Account JSON 파일 존재: $GOOGLE_PLAY_JSON_KEY"
            echo "📋 파일 크기: $(du -h "$GOOGLE_PLAY_JSON_KEY" | cut -f1)"
          else
            echo "❌ Service Account JSON 파일을 찾을 수 없습니다: $GOOGLE_PLAY_JSON_KEY"
            echo "🔍 ~/.config/gcloud/ 디렉토리 내용:"
            ls -la ~/.config/gcloud/ || echo "디렉토리가 존재하지 않습니다"
            exit 1
          fi
          
          # 환경변수 설정
          export AAB_PATH="$AAB_PATH"
          export GOOGLE_PLAY_JSON_KEY="$GOOGLE_PLAY_JSON_KEY"
          export RELEASE_NOTES="$RELEASE_NOTES"
          export VERSION_NAME="$VERSION_NAME"
          export VERSION_CODE="$VERSION_CODE"
          
          # 디버깅 정보 (최종 확인)
          echo "=========================================="
          echo "🔍 최종 배포 환경 확인"
          echo "=========================================="
          echo "🕐 현재 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "📁 작업 디렉토리: $(pwd)"
          echo "📦 AAB 경로: $AAB_PATH"
          echo "🔑 Service Account: $GOOGLE_PLAY_JSON_KEY"
          echo "🎯 배포 버전: $VERSION_NAME (코드: $VERSION_CODE)"
          echo "📄 Changelog 파일: $CHANGELOG_DIR/${VERSION_CODE}.txt"
          echo "🔍 GitHub Run Number: ${{ github.run_number }}"
          echo "🔍 GitHub SHA: ${{ github.sha }}"
          
          # Fastlane 디렉토리 구조 확인
          echo "📁 Fastlane 디렉토리 구조:"
          find android/fastlane/ -type f 2>/dev/null || echo "Fastlane 디렉토리가 비어있거나 존재하지 않습니다"
          
          echo "=========================================="
          
          # Fastlane 실행
          echo "🚀 Fastlane 배포 시작..."
          echo "📋 실행할 명령어: cd android && fastlane deploy_internal"
          
          cd android
          
          # Fastlane 실행 전 마지막 확인
          echo "📋 Fastlane 실행 전 환경 변수 최종 확인:"
          echo "  AAB_PATH: '$AAB_PATH'"
          echo "  GOOGLE_PLAY_JSON_KEY: '$GOOGLE_PLAY_JSON_KEY'"
          echo "  VERSION_CODE: '$VERSION_CODE'"
          echo "  VERSION_NAME: '$VERSION_NAME'"
          echo "  RELEASE_NOTES: '$RELEASE_NOTES'"
          
          # Fastlane 버전 확인
          echo "🔍 Fastlane 버전:"
          fastlane --version
          
          # Ruby 환경 확인
          echo "🔍 Ruby 환경:"
          ruby --version
          gem --version
          
          echo "🚀 Fastlane deploy_internal 실행 중..."
          fastlane deploy_internal

      # 성공 알림
      - name: Notify Play Store Upload Success
        if: success()
        run: |
          echo "✅ Play Store 내부 테스트 배포 성공!"
          echo "버전: ${{ needs.prepare-build.outputs.version }} (${{ needs.prepare-build.outputs.version_code }})"
          echo "커밋: ${{ github.sha }}"
          echo ""
          echo "📱 테스터 확인 방법:"
          echo "1. Play Console → 테스트 및 출시 → 내부 테스트"
          echo "2. 테스터에게 테스트 링크 공유"
          echo "3. https://play.google.com/console/u/0/developers/4736601601401567973/app/4972112751122062243/tracks/internal"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Play Store 배포 실패!"
          echo "로그를 확인해주세요."
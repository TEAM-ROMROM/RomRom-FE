name: ROMROM 설정 파일 관리

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  config-files-management:
    name: 설정 파일 관리
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 필요 패키지 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y smbclient jq
          echo "SMB와 jq 설치 완료"

      # 타임스탬프 폴더 생성
      - name: 타임스탬프 폴더명 생성
        run: |
          export TZ='Asia/Seoul'
          TIMESTAMP=$(date '+%Y%m%d%H%M%S')
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "생성된 타임스탬프: $TIMESTAMP"

      # GitHub Secret에서 환경 파일 생성
      - name: .env 파일 생성
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo ".env 파일 생성 완료"

      # Keystore 설정
      - name: Keystore 및 key.properties 설정
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.DEBUG_KEYSTORE }}" | base64 -d > android/app/keystore/key.jks || echo "Base64 디코딩 실패"
          echo "storeFile=keystore/key.jks" > android/key.properties
          echo "storePassword=android" >> android/key.properties
          echo "keyAlias=androiddebugkey" >> android/key.properties
          echo "keyPassword=android" >> android/key.properties
          echo "Keystore와 key.properties 생성 완료"

      # Google Services JSON
      - name: Google-services.json 생성
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/Google-services.json
          echo "Google-services.json 생성 완료"

      # 짧은 커밋 해시 계산
      - name: 짧은 커밋 해시 계산
        run: |
          echo "SHORT_COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "짧은 커밋 해시: $(echo ${{ github.sha }} | cut -c1-7)"

      # 시간 기반 정보 디렉토리 생성
      - name: CI/CD 정보 JSON 파일 생성
        run: |
          export TZ='Asia/Seoul'
          BUILD_DATE=$(date '+%Y-%m-%d %H:%M')
          
          # 파일 크기 확인
          ENV_SIZE=$(stat -c%s ".env" 2>/dev/null || echo "0")
          KEY_SIZE=$(stat -c%s "android/app/keystore/key.jks" 2>/dev/null || echo "0")
          GOOGLE_SERVICES_SIZE=$(stat -c%s "android/Google-services.json" 2>/dev/null || echo "0")
          
          # JSON 파일 생성
          cat > cicd-gitignore-file.json << EOF
          {
            "build_info": {
              "timestamp": "${TIMESTAMP}",
              "workflow": "${GITHUB_WORKFLOW}",
              "run_id": "${GITHUB_RUN_ID}",
              "run_number": "${GITHUB_RUN_NUMBER}",
              "job": "${GITHUB_JOB}",
              "event": "${GITHUB_EVENT_NAME}",
              "repository": "${GITHUB_REPOSITORY}",
              "owner": "${GITHUB_REPOSITORY_OWNER}",
              "branch": "${GITHUB_REF_NAME}",
              "commit_hash": "${GITHUB_SHA}",
              "short_hash": "${SHORT_COMMIT_HASH}",
              "commit_url": "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}",
              "actor": "${GITHUB_ACTOR}",
              "build_date": "${BUILD_DATE}",
              "runner_os": "${RUNNER_OS}"
            },
            "files": [
              {
                "file_name": ".env",
                "file_path": "/",
                "file_size": "${ENV_SIZE}",
                "last_updated": "${BUILD_DATE}"
              },
              {
                "file_name": "key.jks",
                "file_path": "android/app/keystore/",
                "file_size": "${KEY_SIZE}",
                "last_updated": "${BUILD_DATE}"
              },
              {
                "file_name": "key.properties",
                "file_path": "android/",
                "last_updated": "${BUILD_DATE}"
              },
              {
                "file_name": "Google-services.json",
                "file_path": "android/",
                "file_size": "${GOOGLE_SERVICES_SIZE}",
                "last_updated": "${BUILD_DATE}"
              }
            ]
          }
          EOF
          echo "cicd-gitignore-file.json 파일 생성 완료"

      # 타임스탬프 폴더에 파일 준비
      - name: 타임스탬프 폴더에 파일 준비
        run: |
          mkdir -p gitignore_files/${TIMESTAMP}
          cp .env gitignore_files/${TIMESTAMP}/
          cp android/app/keystore/key.jks gitignore_files/${TIMESTAMP}/
          cp android/key.properties gitignore_files/${TIMESTAMP}/
          cp android/Google-services.json gitignore_files/${TIMESTAMP}/
          cp cicd-gitignore-file.json gitignore_files/${TIMESTAMP}/
          echo "파일 준비 완료:"
          ls -la gitignore_files/${TIMESTAMP}/

      # 최신 파일 심볼릭 링크를 위한 복사본 준비
      - name: 최신 파일 복사본 준비
        run: |
          mkdir -p gitignore_files/latest
          cp .env gitignore_files/latest/
          cp android/app/keystore/key.jks gitignore_files/latest/
          cp android/key.properties gitignore_files/latest/
          cp android/Google-services.json gitignore_files/latest/
          cp cicd-gitignore-file.json gitignore_files/latest/
          echo "최신 파일 준비 완료"

      # 하드코딩된 SMB 경로로 파일 업로드
      - name: SMB를 통해 파일 업로드
        env:
          SMB_USERNAME: ${{ secrets.WEB_SMB_USERNAME }}
          SMB_PASSWORD: ${{ secrets.WEB_SMB_PASSWORD }}
        run: |
          SMB_SERVER=${{ secrets.WEB_SMB_SERVER }}
          SMB_PORT=${{ secrets.WEB_SMB_PORT }}
          SMB_SHARE=${{ secrets.WEB_SMB_SHARE_ROOT_DIR }}
          SMB_BASE_PATH="volume1/projects/romrom/github_secret/front"
          
          echo "SMB 서버에 연결 중..."
          
          # 타임스탬프 디렉토리 생성
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -c "cd $SMB_BASE_PATH; mkdir ${TIMESTAMP}"
          
          # 타임스탬프 폴더에 파일 업로드
          cd gitignore_files/${TIMESTAMP}
          for file in *; do
            echo "타임스탬프 폴더에 파일 업로드 중: $file"
            smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -c "cd $SMB_BASE_PATH/${TIMESTAMP}; put \"$file\""
          done
          
          # 최신 파일도 루트에 업로드 (항상 최신 버전으로 유지)
          cd ../../gitignore_files/latest
          for file in *; do
            echo "최신 파일 업로드 중: $file"
            smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -c "cd $SMB_BASE_PATH; put \"$file\""
          done
          
          # 인덱스 파일 생성 (모든 타임스탬프 폴더 목록 포함)
          cd ../..
          echo "{\"last_updated\": \"${TIMESTAMP}\", \"commit\": \"${SHORT_COMMIT_HASH}\", \"actor\": \"${GITHUB_ACTOR}\"}" > timestamp_index.json
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -c "cd $SMB_BASE_PATH; put timestamp_index.json"
          
          echo "모든 파일 업로드 완료"
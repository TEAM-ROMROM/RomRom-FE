name: ROMROM Configuration Files Management

on:
  push:
    branches: ["main"]
  workflow_dispatch:  # 수동 실행 허용

jobs:
  config-files-management:
    name: 설정 파일 관리
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 디버그용 디렉토리 내용 출력
        run: |
          echo "저장소 체크아웃 완료"
          ls -la

      - name: 필요 패키지 설치
        run: |
          sudo apt-get install -y smbclient jq
          echo "SMB와 jq 의존성 설치 완료"

      # GitHub Secret에서 환경 파일 생성
      - name: .env 파일 생성
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo ".env 파일 생성 완료"

      # Keystore 설정
      - name: Keystore 및 key.properties 설정
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.DEBUG_KEYSTORE }}" | base64 -d > android/app/keystore/key.jks || echo "Base64 디코딩 실패"
          echo "storeFile=keystore/key.jks" > android/key.properties
          echo "storePassword=android" >> android/key.properties
          echo "keyAlias=androiddebugkey" >> android/key.properties
          echo "keyPassword=android" >> android/key.properties
          echo "Keystore와 key.properties 생성 완료"

      # Google Services JSON 생성
      - name: Google-services.json 생성
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/Google-services.json
          echo "Google-services.json 생성 완료"

      # 짧은 커밋 해시 계산
      - name: 짧은 커밋 해시 계산
        id: short_hash
        run: |
          echo "SHORT_COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "짧은 커밋 해시: $(echo ${{ github.sha }} | cut -c1-7)"

      # CICD 정보 JSON 파일 생성 - 수정된 부분
      - name: CI/CD 정보 JSON 파일 생성
        run: |
          export TZ='Asia/Seoul'
          BUILD_DATE=$(date '+%Y-%m-%d %H:%M')
          
          # 파일 크기 확인
          ENV_SIZE=$(stat -c%s ".env" 2>/dev/null || echo "0")
          KEY_SIZE=$(stat -c%s "android/app/keystore/key.jks" 2>/dev/null || echo "0")
          GOOGLE_SERVICES_SIZE=$(stat -c%s "android/Google-services.json" 2>/dev/null || echo "0")
          
          # JSON 파일 생성 (문법 오류 수정)
          cat > cicd-gitignore-file.json << EOF
          {
            "builds": [
              {
                "workflow": {
                  "name": "${GITHUB_WORKFLOW}",
                  "run_id": "${GITHUB_RUN_ID}",
                  "run_number": "${GITHUB_RUN_NUMBER}",
                  "job": "${GITHUB_JOB}",
                  "event": "${GITHUB_EVENT_NAME}"
                },
                "repository": {
                  "name": "${GITHUB_REPOSITORY}",
                  "owner": "${GITHUB_REPOSITORY_OWNER}",
                  "branch": "${GITHUB_REF_NAME}"
                },
                "commit": {
                  "hash": "${GITHUB_SHA}",
                  "short_hash": "${SHORT_COMMIT_HASH}",
                  "url": "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"
                },
                "triggered_by": "${GITHUB_ACTOR}",
                "build_date": "${BUILD_DATE}",
                "runner_os": "${RUNNER_OS}",
                "files": [
                  {
                    "file_name": ".env",
                    "file_path": "/",
                    "file_size": "${ENV_SIZE}",
                    "last_updated": "${BUILD_DATE}"
                  },
                  {
                    "file_name": "key.jks",
                    "file_path": "android/app/keystore/",
                    "file_size": "${KEY_SIZE}",
                    "last_updated": "${BUILD_DATE}"
                  },
                  {
                    "file_name": "key.properties",
                    "file_path": "android/",
                    "last_updated": "${BUILD_DATE}"
                  },
                  {
                    "file_name": "Google-services.json",
                    "file_path": "android/",
                    "file_size": "${GOOGLE_SERVICES_SIZE}",
                    "last_updated": "${BUILD_DATE}"
                  }
                ]
              }
            ]
          }
          EOF
          echo "cicd-gitignore-file.json 파일 생성 완료"
          cat cicd-gitignore-file.json

      # 업로드할 파일 준비
      - name: gitignore 파일 디렉토리 준비
        run: |
          mkdir -p gitignore_files
          cp .env gitignore_files/
          cp android/app/keystore/key.jks gitignore_files/
          cp android/key.properties gitignore_files/
          cp android/Google-services.json gitignore_files/
          cp cicd-gitignore-file.json gitignore_files/
          echo "업로드 준비 완료"
          ls -la gitignore_files/

      # SMB를 통해 파일 업로드
      - name: SMB를 통해 Synology NAS에 파일 업로드
        env:
          SMB_USERNAME: ${{ secrets.WEB_SMB_USERNAME }}
          SMB_PASSWORD: ${{ secrets.WEB_SMB_PASSWORD }}
        run: |
          SMB_SERVER=${{ secrets.WEB_SMB_SERVER }}
          SMB_PORT=${{ secrets.WEB_SMB_PORT }}
          SMB_SHARE=${{ secrets.WEB_SMB_SHARE_ROOT_DIR }}
          SMB_PATH="${{ secrets.WEB_SMB_PATH }}/github_secret/front"
          
          # 대상 디렉토리 생성
          echo "대상 디렉토리 생성 시도: $SMB_PATH"
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -c "mkdir -p $SMB_PATH; ls"
          
          # 각 파일 개별 업로드
          echo "설정 파일 SMB 업로드 시작..."
          cd gitignore_files
          for file in *; do
            echo "파일 업로드 중: $file"
            smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -c "cd $SMB_PATH; put \"$file\""
          done
          
          echo "모든 파일이 $SMB_PATH 경로에 업로드 되었습니다"

      # 설정 파일 히스토리 업데이트
      - name: 설정 파일 히스토리 업데이트
        env:
          SMB_USERNAME: ${{ secrets.WEB_SMB_USERNAME }}
          SMB_PASSWORD: ${{ secrets.WEB_SMB_PASSWORD }}
        run: |
          SMB_SERVER=${{ secrets.WEB_SMB_SERVER }}
          SMB_PORT=${{ secrets.WEB_SMB_PORT }}
          SMB_SHARE=${{ secrets.WEB_SMB_SHARE_ROOT_DIR }}
          SMB_PATH="${{ secrets.WEB_SMB_PATH }}/github_secret/front"
          
          # 기존 히스토리 파일 다운로드 시도
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -c "cd $SMB_PATH; get config-history.json" || echo '{"history": []}' > config-history.json
          
          export TZ='Asia/Seoul'
          BUILD_DATE=$(date '+%Y-%m-%d %H:%M')
          
          # 새 항목 생성
          NEW_ENTRY=$(jq -n \
            --arg date "$BUILD_DATE" \
            --arg actor "$GITHUB_ACTOR" \
            --arg commit "${SHORT_COMMIT_HASH}" \
            --arg workflow "$GITHUB_WORKFLOW" \
            '{date: $date, actor: $actor, commit: $commit, workflow: $workflow}')
          
          # 히스토리에 새 항목 추가
          jq --argjson new_entry "$NEW_ENTRY" '.history += [$new_entry]' config-history.json > updated-history.json
          
          # 업데이트된 히스토리 파일 업로드
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -c "cd $SMB_PATH; put updated-history.json config-history.json"
          echo "설정 히스토리 업데이트 완료"
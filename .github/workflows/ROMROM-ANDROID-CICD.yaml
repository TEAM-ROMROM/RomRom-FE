name: ROMROM-Android-CICD

on:
  push:
    branches: ["main"]

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: List repository contents
        run: |
          echo "Repository checked out"
          ls -la

      # 동적 파일 생성
      - name: Create dynamic files from GitHub Secrets
        run: |
          # .env 파일 생성
          echo "${{ secrets.ENV_FILE }}" > .env
          echo ".env file created"
          
          # Keystore와 key.properties 설정
          mkdir -p android/app/keystore
          echo "${{ secrets.KEYSTORE_JKS }}" | base64 -d > android/app/keystore/key.jks
          echo "Keystore created"
          echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
          echo "key.properties created"
          
          # local.properties 생성 및 변수 치환
          echo "${{ secrets.LOCAL_PROPERTIES }}" > android/local.properties
          sed -i "s|^sdk.dir=.*|sdk.dir=${ANDROID_HOME}|g" android/local.properties
          sed -i "s|^flutter.sdk=.*|flutter.sdk=${FLUTTER_HOME}|g" android/local.properties
          echo "local.properties created"
          
          # Google-services.json 생성
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/Google-services.json
          echo "Google-services.json created"
          
          # 생성된 파일 목록 확인
          ls -la .env android/app/keystore/key.jks android/key.properties android/local.properties android/Google-services.json

      # Flutter 설정 및 빌드 (기존 코드 유지, 생략)
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.3"
          cache: true
          cache-key: flutter-${{ runner.os }}-3.27.3

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Gradle
        working-directory: android
        run: chmod +x gradlew

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4.1"

      - name: Install Fastlane
        run: gem install fastlane

      - name: Calculate Short Commit Hash
        id: short_hash
        run: |
          echo "SHORT_COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Build APK with Fastlane
        run: |
          cd android
          fastlane build --verbose

      - name: Rename and Prepare APK
        run: |
          mkdir -p ./android/app/build/outputs/apk/release/
          mv ./build/app/outputs/flutter-apk/app-release.apk ./android/app/build/outputs/apk/release/romrom-${{ env.SHORT_COMMIT_HASH }}.apk

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: romrom-apk
          path: ./android/app/build/outputs/apk/release/romrom-${{ env.SHORT_COMMIT_HASH }}.apk
          retention-days: 1

  deploy-android:
    name: Deploy Android APK
    runs-on: ubuntu-latest
    needs: build-android

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y smbclient jq sshpass
          echo "SMB, jq, and sshpass dependencies installed"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: romrom-apk
          path: android/app/build/outputs/

      - name: Find APK file
        run: |
          APK_FILE=$(find android/app/build/outputs/ -name "*.apk" | head -n 1)
          echo "APK_FILE=$APK_FILE" >> $GITHUB_ENV
          APK_NAME=$(basename "$APK_FILE")
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV
          echo "APK file found: $APK_FILE"

      - name: Deploy to Synology NAS
        env:
          SMB_USERNAME: ${{ secrets.WEB_SMB_USERNAME }}
          SMB_PASSWORD: ${{ secrets.WEB_SMB_PASSWORD }}
        run: |
          SMB_SERVER=${{ secrets.WEB_SMB_SERVER }}
          SMB_PORT=${{ secrets.WEB_SMB_PORT }}
          SMB_SHARE=${{ secrets.WEB_SMB_SHARE_ROOT_DIR }}
          SMB_PATH=${{ secrets.WEB_SMB_PATH }}
          PW=${{ secrets.WEB_SMB_PASSWORD }}  # SERVER_PASSWORD 대신 SMB_PASSWORD 사용
          TARGET_DIR="/volume1/projects/romrom/github_secret/front"
          export TZ='Asia/Seoul'

          # APK 업로드
          echo "Uploading APK file ${{ env.APK_NAME }} to SMB..."
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -d 10 -c "mkdir $SMB_PATH; cd $SMB_PATH; put ${{ env.APK_FILE }} ${{ env.APK_NAME }}"
          echo "APK uploaded to SMB"

          # 동적 파일 업로드 및 JSON 관리
          echo "Deploying dynamic files to Synology NAS..."
          sshpass -p "$PW" ssh -p 2022 -o StrictHostKeyChecking=no ${{ secrets.WEB_SMB_USERNAME }}@$SMB_SERVER \
            "echo $PW | sudo -S mkdir -p $TARGET_DIR"

          # 파일 목록 정의 (동적으로 생성된 파일들)
          declare -A FILES=(
            [".env"]="${{ secrets.ENV_FILE }}"
            ["android/app/keystore/key.jks"]="${{ secrets.KEYSTORE_JKS }}|base64 -d"
            ["android/key.properties"]="${{ secrets.KEY_PROPERTIES }}"
            ["android/local.properties"]="${{ secrets.LOCAL_PROPERTIES }}"
            ["android/Google-services.json"]="${{ secrets.GOOGLE_SERVICES_JSON }}"
          )

          # 임시 JSON 파일 생성
          TEMP_JSON=$(mktemp)
          echo '{"files": []}' > $TEMP_JSON

          # 기존 romrom-github-secret.json 가져오기
          sshpass -p "$PW" ssh -p 2022 -o StrictHostKeyChecking=no ${{ secrets.WEB_SMB_USERNAME }}@$SMB_SERVER \
            "echo $PW | sudo -S cat $TARGET_DIR/romrom-github-secret.json" > $TEMP_JSON 2>/dev/null || true

          # 각 파일 업로드 및 JSON 업데이트
          for FILE in "${!FILES[@]}"; do
            echo "Processing $FILE..."
            CONTENT="${FILES[$FILE]}"
            if [[ "$CONTENT" =~ \|base64\ -d$ ]]; then
              echo "${CONTENT%|*}" | base64 -d > temp_file
            else
              echo "$CONTENT" > temp_file
            fi
            sshpass -p "$PW" scp -P 2022 temp_file ${{ secrets.WEB_SMB_USERNAME }}@$SMB_SERVER:/tmp/$FILE
            sshpass -p "$PW" ssh -p 2022 -o StrictHostKeyChecking=no ${{ secrets.WEB_SMB_USERNAME }}@$SMB_SERVER \
              "echo $PW | sudo -S mkdir -p $TARGET_DIR/$(dirname $FILE); echo $PW | sudo -S mv /tmp/$FILE $TARGET_DIR/$FILE"
          
            # JSON에 파일 정보 추가
            FILE_INFO=$(jq -n \
              --arg name "$FILE" \
              --arg path "$TARGET_DIR/$FILE" \
              '{name: $name, path: $path}')
            jq --argjson new_file "$FILE_INFO" '.files |= (map(select(.name != $new_file.name)) + [$new_file])' $TEMP_JSON > updated.json
            mv updated.json $TEMP_JSON
          done

          # 최종 JSON 업로드
          sshpass -p "$PW" scp -P 2022 $TEMP_JSON ${{ secrets.WEB_SMB_USERNAME }}@$SMB_SERVER:/tmp/romrom-github-secret.json
          sshpass -p "$PW" ssh -p 2022 -o StrictHostKeyChecking=no ${{ secrets.WEB_SMB_USERNAME }}@$SMB_SERVER \
            "echo $PW | sudo -S mv /tmp/romrom-github-secret.json $TARGET_DIR/romrom-github-secret.json"
          echo "Dynamic files and romrom-github-secret.json uploaded"

          # romrom-cicd-history.json 업데이트 (기존 코드 유지)
          echo "Updating romrom-cicd-history.json..."
          BUILD_DATE=$(date +"%Y-%m-%d %H:%M")
          FILE_SIZE=$(stat -c%s "${{ env.APK_FILE }}")
          COMMIT_LINK="https://github.com/TEAM-ROMROM/RomRom-FE/commit/${{ github.sha }}"
          FULL_COMMIT_HASH="${{ github.sha }}"
          NEW_BUILD_INFO=$(jq -n \
            --arg apk_name "${{ env.APK_NAME }}" \
            --arg file_size "$FILE_SIZE" \
            --arg build_date "$BUILD_DATE" \
            --arg commit_link "$COMMIT_LINK" \
            --arg full_commit_hash "$FULL_COMMIT_HASH" \
            '{apk_name: $apk_name, file_size: $file_size, build_date: $build_date, commit_link: $commit_link, full_commit_hash: $full_commit_hash}')
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -d 10 -c "cd $SMB_PATH; get romrom-cicd-history.json" || echo '{"files": []}' > romrom-cicd-history.json
          jq --argjson new_build "$NEW_BUILD_INFO" '.files += [$new_build]' romrom-cicd-history.json > updated.json
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -d 10 -c "cd $SMB_PATH; put updated.json romrom-cicd-history.json"
          echo "Updated romrom-cicd-history.json uploaded to SMB"
name: ROMROM-Android-CICD

on:
  push:
    branches: ["main"]

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create .env file from GitHub Secret
        run: |
          printf "%s\n" "${{ secrets.ENV }}" > .env
        working-directory: .

      - name: Check .env file
        run: ls -la .

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.3"
          cache: true
          cache-key: flutter-${{ runner.os }}-3.27.3

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Cache Gradle dependencies # Gradle 캐시 저장/복원 추가
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          echo "flutter.sdk=$FLUTTER_HOME" >> android/local.properties

      - name: Install dependencies # Flutter 패키지 설치
        run: flutter pub get

      - name: Setup Gradle # Gradle 버전 명시
        working-directory: android # Gradle 실행 위치 설정
        run: |
          chmod +x gradlew
          ./gradlew wrapper --gradle-version 8.5 --distribution-type=bin --stacktrace

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4.1"

      - name: Install Fastlane
        run: gem install fastlane

      - name: Calculate Short Commit Hash
        id: short_hash
        run: echo "SHORT_COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Build APK with Fastlane
        run: |
          cd android
          fastlane build --verbose
          ls -la ./app/build/outputs/apk/release/ # 디버깅용

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: romrom-apk
          path: ./android/app/build/outputs/apk/release/romrom-${{ env.SHORT_COMMIT_HASH }}.apk
          retention-days: 1

  deploy-android:
    name: Deploy Android APK
    runs-on: ubuntu-latest
    needs: build-android
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: romrom-apk
          path: ./apk

      - name: Calculate Short Commit Hash
        id: short_hash
        run: echo "SHORT_COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Upload APK to Server
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ secrets.WEB_FTP_USERNAME }}
          server: ${{ secrets.WEB_FTP_SERVER }}
          port: ${{ secrets.WEB_FTP_PORT }}
          local_path: "./apk/romrom-${{ env.SHORT_COMMIT_HASH }}.apk"
          remote_path: "/romrom/downloads/romrom-${{ env.SHORT_COMMIT_HASH }}.apk"
          password: ${{ secrets.WEB_FTP_PASSWORD }}

      - name: Update romrom-cicd-history.json
        run: |
          export TZ='Asia/Seoul'
          BUILD_DATE=$(date +"%Y-%m-%d %H:%M")
          APK_NAME="romrom-${{ env.SHORT_COMMIT_HASH }}.apk"
          FILE_SIZE=$(stat -c%s "./apk/$APK_NAME")
          COMMIT_LINK="https://github.com/TEAM-ROMROM/RomRom-FE/commit/${{ github.sha }}"
          FULL_COMMIT_HASH="${{ github.sha }}"

          NEW_BUILD_INFO=$(jq -n \
            --arg apk_name "$APK_NAME" \
            --arg file_size "$FILE_SIZE" \
            --arg build_date "$BUILD_DATE" \
            --arg commit_link "$COMMIT_LINK" \
            --arg full_commit_hash "$FULL_COMMIT_HASH" \
            '{apk_name: $apk_name, file_size: $file_size, build_date: $build_date, commit_link: $commit_link, full_commit_hash: $full_commit_hash}')

          curl -s --fail ftp://${{ secrets.WEB_FTP_SERVER }}/romrom/downloads/romrom-cicd-history.json --user ${{ secrets.WEB_FTP_USERNAME }}:${{ secrets.WEB_FTP_PASSWORD }} > romrom-cicd-history.json || echo '{"files": []}' > romrom-cicd-history.json

          jq --argjson new_build "$NEW_BUILD_INFO" '.files += [$new_build]' romrom-cicd-history.json > updated.json

          curl -T updated.json ftp://${{ secrets.WEB_FTP_SERVER }}/romrom/downloads/romrom-cicd-history.json --user ${{ secrets.WEB_FTP_USERNAME }}:${{ secrets.WEB_FTP_PASSWORD }}

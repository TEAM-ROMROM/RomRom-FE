name: ROMROM-Android-CICD

on:
  push:
    branches: ["deploy"]
  repository_dispatch:
    types: [deploy-all]

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      # Repository 체크아웃 및 목록 출력
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: List repository contents
        run: |
          echo "Repository checked out"
          ls -la

      # Debug Keystore 설정 (디버깅 용도 유지)
      - name: Setup Debug Keystore
        run: |
          mkdir -p ~/.android
          echo "${{ secrets.DEBUG_KEYSTORE }}" | base64 -d > ~/.android/debug.keystore || echo "Base64 decoding failed"
          echo "Debug Keystore created (for debugging)"
          ls -la ~/.android/
          keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android || echo "Keytool failed"

      # .env 파일 생성
      - name: Create .env file from GitHub Secret
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo ".env file created"
          ls -la

      # Keystore와 key.properties 설정
      - name: Setup Keystore and key.properties
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.DEBUG_KEYSTORE }}" | base64 -d > android/app/keystore/key.jks || echo "Base64 decoding failed"
          echo "Keystore created from DEBUG_KEYSTORE"
          ls -la android/app/keystore
          echo "storeFile=keystore/key.jks" > android/key.properties
          echo "storePassword=android" >> android/key.properties
          echo "keyAlias=androiddebugkey" >> android/key.properties
          echo "keyPassword=android" >> android/key.properties
          echo "key.properties created"
          ls -la android/

      # Google-services.json 생성
      - name: Create Google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/Google-services.json
          echo "Google-services.json created"
          ls -la android/

      # Flutter 설정 및 버전 확인
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.3"
          cache: true
          cache-key: flutter-${{ runner.os }}-3.27.3

      - name: Verify Flutter version
        run: |
          echo "Flutter setup completed"
          flutter --version

      # Flutter 및 Gradle 캐시
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 프로젝트 의존성 설치
      - name: Install dependencies
        run: |
          flutter pub get
          echo "Dependencies installed"
          ls -la

      # Gradle 셋업
      - name: Setup Gradle
        working-directory: android
        run: |
          chmod +x gradlew
          echo "Gradle wrapper permissions set"

      # Java 설정 및 버전 확인
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Verify Java version
        run: |
          echo "Java setup completed"
          java -version

      # Android SDK 설정 및 확인
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Verify Android SDK setup
        run: echo "Android SDK setup completed"

      # Ruby 설정 및 확인
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4.1"

      - name: Verify Ruby version
        run: |
          echo "Ruby setup completed"
          ruby -v

      # Fastlane 설치
      - name: Install Fastlane
        run: |
          gem install fastlane
          echo "Fastlane installed"
          fastlane --version

      # 현재 버전 정보 및 짧은 커밋 해시 계산
      - name: Get version info and calculate short commit hash
        id: version_info
        run: |
          CURRENT_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          VERSION=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $CURRENT_VERSION | cut -d'+' -f2)
          SHORT_COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
          
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "SHORT_COMMIT_HASH=$SHORT_COMMIT_HASH" >> $GITHUB_ENV
          
          echo "현재 버전: $CURRENT_VERSION"
          echo "짧은 커밋 해시: $SHORT_COMMIT_HASH"

      # Fastlane을 이용하여 APK 빌드 (릴리스 빌드 유지)
      - name: Build APK with Fastlane
        run: |
          cd android
          fastlane build --verbose
          ls -la ../build/app/outputs/flutter-apk/ || true
          echo "APK built with Fastlane"

      # APK 파일 이름 변경 및 준비
      - name: Rename and Prepare APK
        run: |
          mkdir -p ./android/app/build/outputs/apk/release/
          mv ./build/app/outputs/flutter-apk/app-release.apk ./android/app/build/outputs/apk/release/romrom-v${{ env.VERSION }}-${{ env.SHORT_COMMIT_HASH }}.apk
          echo "APK renamed to romrom-v${{ env.VERSION }}-${{ env.SHORT_COMMIT_HASH }}.apk"
          ls -la ./android/app/build/outputs/apk/release/

      # APK를 아티팩트로 업로드
      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: romrom-apk
          path: ./android/app/build/outputs/apk/release/romrom-v${{ env.VERSION }}-${{ env.SHORT_COMMIT_HASH }}.apk
          retention-days: 1

  deploy-android:
    name: Deploy Android APK
    runs-on: ubuntu-latest
    needs: build-android
    if: github.ref == 'refs/heads/deploy'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List repository contents for deploy
        run: |
          echo "Repository checked out for deploy"
          ls -la

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y smbclient jq
          echo "SMB and jq dependencies installed"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: romrom-apk
          path: android/app/build/outputs/

      - name: List downloaded structure (Debug)
        run: |
          ls -alR android/app/build/outputs
          echo "Downloaded structure listed"

      - name: Find APK file
        run: |
          APK_FILE=$(find android/app/build/outputs/ -name "*.apk" | head -n 1)
          echo "APK_FILE=$APK_FILE" >> $GITHUB_ENV
          APK_NAME=$(basename "$APK_FILE")
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV
          echo "APK file found: $APK_FILE"

      - name: Upload files to Synology NAS via SMB
        env:
          SMB_USERNAME: ${{ secrets.WEB_SMB_USERNAME }}
          SMB_PASSWORD: ${{ secrets.WEB_SMB_PASSWORD }}
        run: |
          SMB_SERVER=${{ secrets.WEB_SMB_SERVER }}
          SMB_PORT=${{ secrets.WEB_SMB_PORT }}
          SMB_SHARE=${{ secrets.WEB_SMB_SHARE_ROOT_DIR }}
          SMB_PATH=${{ secrets.WEB_SMB_PATH }}
          echo "Uploading APK file ${{ env.APK_NAME }} to SMB..."
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -d 10 -c "mkdir $SMB_PATH; cd $SMB_PATH; put ${{ env.APK_FILE }} ${{ env.APK_NAME }}"
          echo "APK uploaded to SMB"

      - name: Update romrom-cicd-history.json
        env:
          SMB_USERNAME: ${{ secrets.WEB_SMB_USERNAME }}
          SMB_PASSWORD: ${{ secrets.WEB_SMB_PASSWORD }}
        run: |
          export TZ='Asia/Seoul'
          BUILD_DATE=$(date +"%Y-%m-%d %H:%M")
          FILE_SIZE=$(stat -c%s "${{ env.APK_FILE }}")
          COMMIT_LINK="https://github.com/TEAM-ROMROM/RomRom-FE/commit/${{ github.sha }}"
          FULL_COMMIT_HASH="${{ github.sha }}"
          NEW_BUILD_INFO=$(jq -n \
            --arg apk_name "${{ env.APK_NAME }}" \
            --arg file_size "$FILE_SIZE" \
            --arg build_date "$BUILD_DATE" \
            --arg commit_link "$COMMIT_LINK" \
            --arg full_commit_hash "$FULL_COMMIT_HASH" \
            '{apk_name: $apk_name, file_size: $file_size, build_date: $build_date, commit_link: $commit_link, full_commit_hash: $full_commit_hash}')
          SMB_SERVER=${{ secrets.WEB_SMB_SERVER }}
          SMB_PORT=${{ secrets.WEB_SMB_PORT }}
          SMB_SHARE=${{ secrets.WEB_SMB_SHARE_ROOT_DIR }}
          SMB_PATH=${{ secrets.WEB_SMB_PATH }}
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -d 10 -c "cd $SMB_PATH; get romrom-cicd-history.json" || echo '{"files": []}' > romrom-cicd-history.json
          echo "Downloaded or initialized romrom-cicd-history.json"
          cat romrom-cicd-history.json
          jq --argjson new_build "$NEW_BUILD_INFO" '.files += [$new_build]' romrom-cicd-history.json > updated.json
          echo "Updated romrom-cicd-history.json with new build info"
          cat updated.json
          smbclient "//$SMB_SERVER/$SMB_SHARE" -p "$SMB_PORT" -U "$SMB_USERNAME%$SMB_PASSWORD" -m SMB3 -d 10 -c "cd $SMB_PATH; put updated.json romrom-cicd-history.json"
          echo "Updated romrom-cicd-history.json uploaded to SMB"

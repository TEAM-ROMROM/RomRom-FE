# ===================================================================
# 범용 프로젝트 자동 체인지로그 관리 워크플로우
# ===================================================================
#
# 이 워크플로우는 deploy 브랜치로 PR이 생성될 때 CodeRabbit AI의 리뷰를
# 자동으로 감지하고 파싱하여 CHANGELOG.json과 CHANGELOG.md를 업데이트합니다.
#
# 작동 방식:
# 1. deploy 브랜치로 PR 생성 시 트리거
# 2. CodeRabbit Summary가 생성될 때까지 최대 10분 대기
# 3. Summary 내용을 파싱하여 CHANGELOG 파일들 업데이트
# 4. PR 자동 머지 후 deploy 브랜치로 강제 푸시하여 배포 트리거
#
# 지원 기능:
# - 다양한 프로젝트 타입에서 버전 정보 자동 감지
# - CodeRabbit Summary의 동적 카테고리 파싱
# - JSON 및 Markdown 형식의 체인지로그 자동 생성
# - PR 자동 머지 및 배포 파이프라인 트리거
#
# ===================================================================

name: AUTO UPDATE PROJECT CHANGELOG

on:
  pull_request_target:
    types: [opened]
    branches: ["deploy"]

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: CodeRabbit Summary 감지 및 파싱
  detect-and-parse:
    name: CodeRabbit Summary 감지 및 파싱
    runs-on: ubuntu-latest
    outputs:
      summary_found: ${{ steps.detect_summary.outputs.summary_found }}
      version: ${{ steps.get_version.outputs.version }}
      project_type: ${{ steps.get_version.outputs.project_type }}
    steps:
      - name: CodeRabbit Summary 요청 댓글 달기
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -X POST \
               -d "{\"body\": \"@coderabbit summary\"}" \
               "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"

      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main

      - name: Git 설정 및 최신 상태 동기화
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull origin main

      - name: 버전 관리 스크립트 권한 설정
        run: |
          if [ -f ".github/scripts/version-manager.sh" ]; then
            chmod +x .github/scripts/version-manager.sh
            echo "✅ 버전 관리 스크립트 권한 설정 완료"
          else
            echo "⚠️ .github/scripts/version-manager.sh 파일을 찾을 수 없습니다."
          fi

      - name: 현재 버전 및 프로젝트 정보 확인
        id: get_version
        run: |
          # 범용 버전 스크립트 사용
          if [ -f ".github/scripts/version-manager.sh" ]; then
            CURRENT_VERSION=$(./.github/scripts/version-manager.sh get | tail -n 1)
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

            # 프로젝트 타입 확인
            if [ -f "version.yml" ]; then
              PROJECT_TYPE=$(grep "^project_type:" version.yml | sed 's/project_type: *"\([^"]*\)".*/\1/')
              echo "project_type=$PROJECT_TYPE" >> $GITHUB_OUTPUT
              echo "✅ 프로젝트 타입: $PROJECT_TYPE"
            else
              echo "project_type=unknown" >> $GITHUB_OUTPUT
              echo "⚠️ version.yml 파일을 찾을 수 없습니다."
            fi
          else
            # 폴백: 기존 방식으로 버전 확인
            if [ -f "build.gradle" ]; then
              CURRENT_VERSION=$(grep "version = '" build.gradle | sed "s/version = '//" | sed "s/'//")
              echo "project_type=spring" >> $GITHUB_OUTPUT
            elif [ -f "pubspec.yaml" ]; then
              CURRENT_VERSION=$(grep "^version:" pubspec.yaml | sed 's/version: *\([0-9.]*\).*/\1/')
              echo "project_type=flutter" >> $GITHUB_OUTPUT
            elif [ -f "package.json" ]; then
              CURRENT_VERSION=$(grep '"version":' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
              echo "project_type=node" >> $GITHUB_OUTPUT
            else
              CURRENT_VERSION="1.0.0"
              echo "project_type=unknown" >> $GITHUB_OUTPUT
            fi
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "⚠️ 폴백 모드로 버전 확인: $CURRENT_VERSION"
          fi

      - name: CodeRabbit Summary 업데이트 감지 (스마트 폴링)
        id: detect_summary
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          VERSION="${{ steps.get_version.outputs.version }}"
          PROJECT_TYPE="${{ steps.get_version.outputs.project_type }}"
          TODAY=$(date '+%Y-%m-%d')
          MAX_ATTEMPTS=120  # 10분 = 120 * 5초
          ATTEMPT=0

          echo "🔍 PR #$PR_NUMBER에서 CodeRabbit Summary 업데이트 감지 시작..."
          echo "📋 프로젝트 정보: $PROJECT_TYPE v$VERSION"
          echo "⏰ 최대 대기 시간: 10분 (5초마다 체크)"

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "[$ATTEMPT/$MAX_ATTEMPTS] CodeRabbit Summary 확인 중... ($(date '+%H:%M:%S'))"

            # GitHub API로 PR HTML 가져오기
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.html" \
                 "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}" \
                 > pr_content.html

            # "No description provided" 체크
            if grep -q "No description provided" pr_content.html; then
              echo "❌ 아직 'No description provided' 상태입니다"
            elif grep -q "Summary by CodeRabbit" pr_content.html; then
              echo "✅ CodeRabbit Summary 발견! 파싱을 시작합니다"
              echo "summary_found=true" >> $GITHUB_OUTPUT
              break
            else
              echo "⏳ CodeRabbit Summary 아직 없음"
            fi

            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              sleep 5
            fi
          done

          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "⚠️ 10분 대기 후에도 CodeRabbit Summary를 찾을 수 없습니다"
            echo "summary_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Summary 파일 업로드 (다음 Job에서 사용)
        if: steps.detect_summary.outputs.summary_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pr-content
          path: pr_content.html
          retention-days: 1

  # Job 2: CHANGELOG 업데이트 (Job 1 완료 후 실행)
  update-changelog:
    name: CHANGELOG 업데이트
    runs-on: ubuntu-latest
    needs: detect-and-parse
    if: needs.detect-and-parse.outputs.summary_found == 'true'
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main

      - name: Git 설정
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull origin main

      - name: Summary 파일 다운로드
        uses: actions/download-artifact@v4
        with:
          name: pr-content

      - name: Python 스크립트 실행 권한 설정
        run: |
          # 파이썬 스크립트 실행 권한 설정
          chmod +x .github/scripts/changelog_parser.py
          chmod +x .github/scripts/changelog_generator.py
          echo "✅ Python 스크립트 실행 권한 설정 완료"

      - name: 동적 Summary 파싱 및 CHANGELOG.json 업데이트
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          VERSION="${{ needs.detect-and-parse.outputs.version }}"
          PROJECT_TYPE="${{ needs.detect-and-parse.outputs.project_type }}"
          TODAY=$(date '+%Y-%m-%d')
          TIMESTAMP=$(date '+%Y-%m-%dT%H:%M:%SZ')

          echo "📝 CodeRabbit Summary 동적 파싱 시작..."
          echo "📋 프로젝트 정보: $PROJECT_TYPE v$VERSION"

          # Summary 섹션 추출
          sed -n '/<h2[^>]*>Summary by CodeRabbit<\/h2>/,/<\/div>/p' pr_content.html > summary_section.html

          # 환경 변수 설정하고 Python 스크립트 실행
          export VERSION="$VERSION"
          export PROJECT_TYPE="$PROJECT_TYPE"
          export TODAY="$TODAY"
          export PR_NUMBER="$PR_NUMBER"
          export TIMESTAMP="$TIMESTAMP"

          # .github/scripts/changelog_parser.py 실행
          python3 .github/scripts/changelog_parser.py

      - name: CHANGELOG.md 재생성
        run: |
          echo "📄 CHANGELOG.json에서 CHANGELOG.md 재생성 중..."
          # .github/scripts/changelog_generator.py 실행
          python3 .github/scripts/changelog_generator.py

      - name: 변경사항 커밋 및 푸시
        run: |
          git add CHANGELOG.json CHANGELOG.md

          if git diff --staged --quiet; then
            echo "📝 변경사항이 없습니다"
          else
            REPO_NAME=$(basename "${{ github.repository }}")
            PROJECT_TYPE="${{ needs.detect-and-parse.outputs.project_type }}"
            VERSION="${{ needs.detect-and-parse.outputs.version }}"

            git commit -m "$REPO_NAME 버전 관리 : docs : v$VERSION 릴리즈 문서 업데이트 (PR #${{ github.event.pull_request.number }})"
            git push origin HEAD:main
            echo "✅ 변경사항이 성공적으로 커밋되었습니다"
          fi

      - name: 정리
        run: |
          rm -f summary_section.html

  # Job 3: PR 머지 및 배포 트리거 (Job 2 완료 후 실행)
  merge-and-deploy:
    name: PR 머지 및 배포 트리거
    runs-on: ubuntu-latest
    needs: [detect-and-parse, update-changelog]
    if: needs.detect-and-parse.outputs.summary_found == 'true'
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets._GITHUB_PAT_TOKEN }}
          fetch-depth: 0

      - name: Git 설정
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: PR 브랜치 최신화
        env:
          GH_TOKEN: ${{ secrets._GITHUB_PAT_TOKEN }}
        run: |
          PR_HEAD=$(gh pr view ${{ github.event.pull_request.number }} --json headRefName -q .headRefName)
          git fetch origin $PR_HEAD
          git checkout $PR_HEAD
          git fetch origin deploy:deploy
          git merge --no-edit deploy || true
          git push origin HEAD

      - name: 자동 PR Merge
        env:
          GH_TOKEN: ${{ secrets._GITHUB_PAT_TOKEN }}
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --merge --admin --body "auto-merge after rebasing"

      - name: 배포 완료 알림
        run: |
          echo "🎉 체인지로그 업데이트 및 배포 트리거 완료!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 배포 정보:"
          echo "  • 버전: ${{ needs.detect-and-parse.outputs.version }}"
          echo "  • 프로젝트 타입: ${{ needs.detect-and-parse.outputs.project_type }}"
          echo "  • PR 번호: #${{ github.event.pull_request.number }}"
          echo "  • 브랜치: deploy"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
